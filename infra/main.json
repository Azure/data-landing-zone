{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.11.1.770",
      "templateHash": "18207235743975773130"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "metadata": {
        "description": "Specifies the location for all resources."
      }
    },
    "environment": {
      "type": "string",
      "defaultValue": "dev",
      "metadata": {
        "description": "Specifies the environment of the deployment."
      },
      "allowedValues": [
        "dev",
        "tst",
        "prd"
      ]
    },
    "prefix": {
      "type": "string",
      "metadata": {
        "description": "Specifies the prefix for all resources created in this deployment."
      },
      "maxLength": 10,
      "minLength": 2
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Specifies the tags that you want to apply to all resources."
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/16",
      "metadata": {
        "description": "Specifies the address space of the vnet of the data landing zone."
      }
    },
    "servicesSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.0.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for general services of the data landing zone."
      }
    },
    "databricksIntegrationPublicSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.1.0/24",
      "metadata": {
        "description": "Specifies the address space of the public subnet that is used for the shared integration databricks workspace."
      }
    },
    "databricksIntegrationPrivateSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.2.0/24",
      "metadata": {
        "description": "Specifies the address space of the private subnet that is used for the shared integration databricks workspace."
      }
    },
    "databricksProductPublicSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.3.0/24",
      "metadata": {
        "description": "Specifies the address space of the public subnet that is used for the shared product databricks workspace."
      }
    },
    "databricksProductPrivateSubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.4.0/24",
      "metadata": {
        "description": "Specifies the address space of the private subnet that is used for the shared product databricks workspace."
      }
    },
    "powerBiGatewaySubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.5.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for the power bi gateway."
      }
    },
    "dataIntegration001SubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.6.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for data integration 001."
      }
    },
    "dataIntegration002SubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.7.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for data integration 002."
      }
    },
    "dataProduct001SubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.8.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for data product 001."
      }
    },
    "dataProduct002SubnetAddressPrefix": {
      "type": "string",
      "defaultValue": "10.1.9.0/24",
      "metadata": {
        "description": "Specifies the address space of the subnet that is used for data product 002."
      }
    },
    "dataManagementZoneVnetId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource Id of the vnet in the data management landing zone."
      }
    },
    "firewallPrivateIp": {
      "type": "string",
      "defaultValue": "10.0.0.4",
      "metadata": {
        "description": "Specifies the private IP address of the central firewall."
      }
    },
    "dnsServerAdresses": {
      "type": "array",
      "defaultValue": [
        "10.0.0.4"
      ],
      "metadata": {
        "description": "Specifies the private IP addresses of the dns servers."
      }
    },
    "administratorPassword": {
      "type": "secureString",
      "metadata": {
        "description": "Specifies the administrator password of the sql servers."
      }
    },
    "purviewId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the central purview instance."
      }
    },
    "purviewManagedStorageId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the managed storage of the central purview instance."
      }
    },
    "purviewManagedEventHubId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the managed event hub of the central purview instance."
      }
    },
    "purviewSelfHostedIntegrationRuntimeAuthKey": {
      "type": "secureString",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the Auth Key for the Self-hosted integration runtime of Purview."
      }
    },
    "deploySelfHostedIntegrationRuntimes": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Specifies whether the self-hosted integration runtimes should be deployed."
      }
    },
    "dataLandingZoneSubscriptionIds": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Specifies the subscription IDs of the other Data Landing Zones."
      }
    },
    "privateDnsZoneIdKeyVault": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Key Vault."
      }
    },
    "privateDnsZoneIdDataFactory": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Data Factory."
      }
    },
    "privateDnsZoneIdDataFactoryPortal": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Data Factory Portal."
      }
    },
    "privateDnsZoneIdBlob": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Blob Storage."
      }
    },
    "privateDnsZoneIdDfs": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Datalake Storage."
      }
    },
    "privateDnsZoneIdSqlServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Sql Server."
      }
    },
    "privateDnsZoneIdMySqlServer": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for My SQL Server."
      }
    },
    "privateDnsZoneIdEventhubNamespace": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for EventHub Namespaces."
      }
    },
    "privateDnsZoneIdSynapseDev": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Synapse Dev."
      }
    },
    "privateDnsZoneIdSynapseSql": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Specifies the resource ID of the private DNS zone for Synapse Sql."
      }
    }
  },
  "variables": {
    "name": "[toLower(format('{0}-{1}', parameters('prefix'), parameters('environment')))]",
    "tagsDefault": {
      "Owner": "Data Management and Analytics Scenario",
      "Project": "Data Management and Analytics Scenario",
      "Environment": "[parameters('environment')]",
      "Toolkit": "bicep",
      "Name": "[variables('name')]"
    },
    "tagsJoined": "[union(variables('tagsDefault'), parameters('tags'))]",
    "administratorUsername": "SuperMainUser"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-network', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-mgmt', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-logging', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-runtimes', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-storage', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-externalstorage', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-metadata', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-shared-integration', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-shared-product', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-di001', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-di002', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-dp001', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/resourceGroups",
      "apiVersion": "2021-01-01",
      "name": "[format('{0}-dp002', variables('name'))]",
      "location": "[parameters('location')]",
      "tags": "[variables('tagsJoined')]",
      "properties": {}
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "networkServices",
      "resourceGroup": "[format('{0}-network', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "firewallPrivateIp": {
            "value": "[parameters('firewallPrivateIp')]"
          },
          "dnsServerAdresses": {
            "value": "[parameters('dnsServerAdresses')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "servicesSubnetAddressPrefix": {
            "value": "[parameters('servicesSubnetAddressPrefix')]"
          },
          "databricksIntegrationPublicSubnetAddressPrefix": {
            "value": "[parameters('databricksIntegrationPublicSubnetAddressPrefix')]"
          },
          "databricksIntegrationPrivateSubnetAddressPrefix": {
            "value": "[parameters('databricksIntegrationPrivateSubnetAddressPrefix')]"
          },
          "databricksProductPublicSubnetAddressPrefix": {
            "value": "[parameters('databricksProductPublicSubnetAddressPrefix')]"
          },
          "databricksProductPrivateSubnetAddressPrefix": {
            "value": "[parameters('databricksProductPrivateSubnetAddressPrefix')]"
          },
          "powerBiGatewaySubnetAddressPrefix": {
            "value": "[parameters('powerBiGatewaySubnetAddressPrefix')]"
          },
          "dataIntegration001SubnetAddressPrefix": {
            "value": "[parameters('dataIntegration001SubnetAddressPrefix')]"
          },
          "dataIntegration002SubnetAddressPrefix": {
            "value": "[parameters('dataIntegration002SubnetAddressPrefix')]"
          },
          "dataProduct001SubnetAddressPrefix": {
            "value": "[parameters('dataProduct001SubnetAddressPrefix')]"
          },
          "dataProduct002SubnetAddressPrefix": {
            "value": "[parameters('dataProduct002SubnetAddressPrefix')]"
          },
          "dataManagementZoneVnetId": {
            "value": "[parameters('dataManagementZoneVnetId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "7464061240666107824"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "firewallPrivateIp": {
              "type": "string",
              "defaultValue": "10.0.0.4"
            },
            "dnsServerAdresses": {
              "type": "array",
              "defaultValue": [
                "10.0.0.4"
              ]
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.0.0/16"
            },
            "servicesSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.0.0/24"
            },
            "databricksIntegrationPublicSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.1.0/24"
            },
            "databricksIntegrationPrivateSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.2.0/24"
            },
            "databricksProductPublicSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.3.0/24"
            },
            "databricksProductPrivateSubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.4.0/24"
            },
            "powerBiGatewaySubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.5.0/24"
            },
            "dataIntegration001SubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.6.0/24"
            },
            "dataIntegration002SubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.7.0/24"
            },
            "dataProduct001SubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.8.0/24"
            },
            "dataProduct002SubnetAddressPrefix": {
              "type": "string",
              "defaultValue": "10.1.9.0/24"
            },
            "dataManagementZoneVnetId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "servicesSubnetName": "ServicesSubnet",
            "databricksIntegrationPrivateSubnetName": "DatabricksIntegrationSubnetPrivate",
            "databricksIntegrationPublicSubnetName": "DatabricksIntegrationSubnetPublic",
            "databricksProductPrivateSubnetName": "DatabricksProductSubnetPrivate",
            "databricksProductPublicSubnetName": "DatabricksProductSubnetPublic",
            "powerBiGatewaySubnetName": "PowerBIGatewaySubnet",
            "dataIntegration001SubnetName": "DataIntegration001Subnet",
            "dataIntegration002SubnetName": "DataIntegration002Subnet",
            "dataProduct001SubnetName": "DataProduct001Subnet",
            "dataProduct002SubnetName": "DataProduct002Subnet",
            "dataManagementZoneVnetSubscriptionId": "[if(greaterOrEquals(length(split(parameters('dataManagementZoneVnetId'), '/')), 9), split(parameters('dataManagementZoneVnetId'), '/')[2], subscription().subscriptionId)]",
            "dataManagementZoneVnetResourceGroupName": "[if(greaterOrEquals(length(split(parameters('dataManagementZoneVnetId'), '/')), 9), split(parameters('dataManagementZoneVnetId'), '/')[4], resourceGroup().name)]",
            "dataManagementZoneVnetName": "[if(greaterOrEquals(length(split(parameters('dataManagementZoneVnetId'), '/')), 9), last(split(parameters('dataManagementZoneVnetId'), '/')), 'incorrectSegmentLength')]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/routeTables",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-routetable', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "disableBgpRoutePropagation": false,
                "routes": [
                  {
                    "name": "to-firewall-default",
                    "properties": {
                      "addressPrefix": "0.0.0.0/0",
                      "nextHopType": "VirtualAppliance",
                      "nextHopIpAddress": "[parameters('firewallPrivateIp')]"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-nsg', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": []
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-databricks-nsg', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-inbound",
                    "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-worker-outbound",
                    "properties": {
                      "description": "Required for worker nodes communication within a cluster.",
                      "protocol": "*",
                      "sourcePortRange": "*",
                      "destinationPortRange": "*",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "VirtualNetwork",
                      "access": "Allow",
                      "priority": 101,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-sql",
                    "properties": {
                      "description": "Required for workers communication with Azure SQL services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "3306",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Sql",
                      "access": "Allow",
                      "priority": 102,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-storage",
                    "properties": {
                      "description": "Required for workers communication with Azure Storage services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "Storage",
                      "access": "Allow",
                      "priority": 103,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-eventhub",
                    "properties": {
                      "description": "Required for worker communication with Azure Eventhub services.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "9093",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "EventHub",
                      "access": "Allow",
                      "priority": 104,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "Microsoft.Databricks-workspaces_UseOnly_databricks-worker-to-databricks-webapp",
                    "properties": {
                      "description": "Required for workers communication with Databricks Webapp.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "443",
                      "sourceAddressPrefix": "VirtualNetwork",
                      "destinationAddressPrefix": "AzureDatabricks",
                      "access": "Allow",
                      "priority": 100,
                      "direction": "Outbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}-aml-nsg', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "securityRules": [
                  {
                    "name": "AllowAzureMachineLearning",
                    "properties": {
                      "description": "Required for Azure Machine Learning Compute Clusters and Instances with public IP.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "44224",
                      "sourceAddressPrefix": "AzureMachineLearning",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 120,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  },
                  {
                    "name": "AllowBatchNodeManagement",
                    "properties": {
                      "description": "Required for Azure Machine Learning Compute Clusters and Instances with public IP.",
                      "protocol": "Tcp",
                      "sourcePortRange": "*",
                      "destinationPortRange": "29876-29877",
                      "sourceAddressPrefix": "BatchNodeManagement",
                      "destinationAddressPrefix": "*",
                      "access": "Allow",
                      "priority": 130,
                      "direction": "Inbound",
                      "sourcePortRanges": [],
                      "destinationPortRanges": [],
                      "sourceAddressPrefixes": [],
                      "destinationAddressPrefixes": []
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}-vnet', parameters('prefix'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "[parameters('vnetAddressPrefix')]"
                  ]
                },
                "dhcpOptions": {
                  "dnsServers": "[parameters('dnsServerAdresses')]"
                },
                "enableDdosProtection": false,
                "subnets": [
                  {
                    "name": "[variables('servicesSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('servicesSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('databricksIntegrationPublicSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('databricksIntegrationPublicSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-databricks-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [
                        {
                          "name": "DatabricksSubnetDelegation",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('databricksIntegrationPrivateSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('databricksIntegrationPrivateSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-databricks-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [
                        {
                          "name": "DatabricksSubnetDelegation",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('databricksProductPublicSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('databricksProductPublicSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-databricks-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [
                        {
                          "name": "DatabricksSubnetDelegation",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('databricksProductPrivateSubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('databricksProductPrivateSubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-databricks-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [
                        {
                          "name": "DatabricksSubnetDelegation",
                          "properties": {
                            "serviceName": "Microsoft.Databricks/workspaces"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('powerBiGatewaySubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('powerBiGatewaySubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [
                        {
                          "name": "PowerBIGatewaySubnetDelegation",
                          "properties": {
                            "serviceName": "Microsoft.PowerPlatform/vnetaccesslinks"
                          }
                        }
                      ],
                      "privateEndpointNetworkPolicies": "Enabled",
                      "privateLinkServiceNetworkPolicies": "Enabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('dataIntegration001SubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('dataIntegration001SubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('dataIntegration002SubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('dataIntegration002SubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('dataProduct001SubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('dataProduct001SubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  },
                  {
                    "name": "[variables('dataProduct002SubnetName')]",
                    "properties": {
                      "addressPrefix": "[parameters('dataProduct002SubnetAddressPrefix')]",
                      "addressPrefixes": [],
                      "networkSecurityGroup": {
                        "id": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
                      },
                      "routeTable": {
                        "id": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
                      },
                      "delegations": [],
                      "privateEndpointNetworkPolicies": "Disabled",
                      "privateLinkServiceNetworkPolicies": "Disabled",
                      "serviceEndpointPolicies": [],
                      "serviceEndpoints": []
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-databricks-nsg', parameters('prefix')))]",
                "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]",
                "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('dataManagementZoneVnetId')))]",
              "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
              "apiVersion": "2020-11-01",
              "name": "[format('{0}/{1}', format('{0}-vnet', parameters('prefix')), variables('dataManagementZoneVnetName'))]",
              "properties": {
                "allowForwardedTraffic": true,
                "allowGatewayTransit": true,
                "allowVirtualNetworkAccess": true,
                "peeringState": "Connected",
                "remoteVirtualNetwork": {
                  "id": "[parameters('dataManagementZoneVnetId')]"
                },
                "useRemoteGateways": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
              ]
            },
            {
              "condition": "[not(empty(parameters('dataManagementZoneVnetId')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('dataManagementZoneDataLandingZoneVnetPeering-{0}', parameters('prefix'))]",
              "subscriptionId": "[variables('dataManagementZoneVnetSubscriptionId')]",
              "resourceGroup": "[variables('dataManagementZoneVnetResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "dataLandingZoneVnetId": {
                    "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
                  },
                  "dataManagementZoneVnetId": {
                    "value": "[parameters('dataManagementZoneVnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "17078371307299912803"
                    }
                  },
                  "parameters": {
                    "dataManagementZoneVnetId": {
                      "type": "string"
                    },
                    "dataLandingZoneVnetId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "dataManagementZoneVnetName": "[if(greaterOrEquals(length(split(parameters('dataManagementZoneVnetId'), '/')), 9), last(split(parameters('dataManagementZoneVnetId'), '/')), 'incorrectSegmentLength')]",
                    "dataLandingZoneVnetName": "[if(greaterOrEquals(length(split(parameters('dataLandingZoneVnetId'), '/')), 9), last(split(parameters('dataLandingZoneVnetId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks/virtualNetworkPeerings",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('dataManagementZoneVnetName'), variables('dataLandingZoneVnetName'))]",
                      "properties": {
                        "allowForwardedTraffic": true,
                        "allowGatewayTransit": true,
                        "allowVirtualNetworkAccess": true,
                        "peeringState": "Connected",
                        "remoteVirtualNetwork": {
                          "id": "[parameters('dataLandingZoneVnetId')]"
                        },
                        "useRemoteGateways": false
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
              ]
            }
          ],
          "outputs": {
            "vnetId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))]"
            },
            "nsgId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', format('{0}-nsg', parameters('prefix')))]"
            },
            "routeTableId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/routeTables', format('{0}-routetable', parameters('prefix')))]"
            },
            "servicesSubnetId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}-vnet', parameters('prefix')))).subnets[0].id]"
            },
            "databricksIntegrationPublicSubnetName": {
              "type": "string",
              "value": "[variables('databricksIntegrationPublicSubnetName')]"
            },
            "databricksIntegrationPrivateSubnetName": {
              "type": "string",
              "value": "[variables('databricksIntegrationPrivateSubnetName')]"
            },
            "databricksProductPublicSubnetName": {
              "type": "string",
              "value": "[variables('databricksProductPublicSubnetName')]"
            },
            "databricksProductPrivateSubnetName": {
              "type": "string",
              "value": "[variables('databricksProductPrivateSubnetName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-network', variables('name')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "loggingServices",
      "resourceGroup": "[format('{0}-logging', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.servicesSubnetId.value]"
          },
          "privateDnsZoneIdKeyVault": {
            "value": "[parameters('privateDnsZoneIdKeyVault')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "5130835354464131941"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "privateDnsZoneIdKeyVault": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "keyVault001Name": "[format('{0}-vault003', parameters('prefix'))]",
            "logAnalytics001Name": "[format('{0}-la001', parameters('prefix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "keyVault001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "keyvaultName": {
                    "value": "[variables('keyVault001Name')]"
                  },
                  "privateDnsZoneIdKeyVault": {
                    "value": "[parameters('privateDnsZoneIdKeyVault')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "18239561620865877"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "keyvaultName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdKeyVault": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "keyVaultPrivateEndpointName": "[format('{0}-private-endpoint', parameters('keyvaultName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('keyvaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "accessPolicies": [],
                        "createMode": "default",
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "softDeleteRetentionInDays": 7,
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('keyVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('keyVaultPrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "vault"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdKeyVault')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('keyVaultPrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdKeyVault')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyvaultId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyvaultName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "logAnalytics001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "logAnanalyticsName": {
                    "value": "[variables('logAnalytics001Name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "9848298019813316345"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "logAnanalyticsName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.OperationalInsights/workspaces",
                      "apiVersion": "2020-10-01",
                      "name": "[parameters('logAnanalyticsName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "features": {},
                        "publicNetworkAccessForIngestion": "Enabled",
                        "publicNetworkAccessForQuery": "Enabled",
                        "retentionInDays": 120,
                        "sku": {
                          "name": "PerGB2018"
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnanalyticsName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "logAnalytics001SecretDeployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "keyVaultId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault001')).outputs.keyvaultId.value]"
                  },
                  "logAnalyticsId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalytics001')).outputs.logAnalyticsWorkspaceId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "15909521868724474599"
                    }
                  },
                  "parameters": {
                    "keyVaultId": {
                      "type": "string"
                    },
                    "logAnalyticsId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "keyVaultName": "[if(greaterOrEquals(length(split(parameters('keyVaultId'), '/')), 9), last(split(parameters('keyVaultId'), '/')), 'incorrectSegmentLength')]",
                    "logAnalyticsSubscriptionId": "[if(greaterOrEquals(length(split(parameters('logAnalyticsId'), '/')), 9), split(parameters('logAnalyticsId'), '/')[2], subscription().subscriptionId)]",
                    "logAnalyticsResourceGroupName": "[if(greaterOrEquals(length(split(parameters('logAnalyticsId'), '/')), 9), split(parameters('logAnalyticsId'), '/')[4], resourceGroup().name)]",
                    "logAnalyticsName": "[if(greaterOrEquals(length(split(parameters('logAnalyticsId'), '/')), 9), last(split(parameters('logAnalyticsId'), '/')), 'incorrectSegmentLength')]",
                    "logAnalyticsWorkspaceIdSecretName": "[format('{0}Id', variables('logAnalyticsName'))]",
                    "logAnalyticsWorkspaceKeySecretName": "[format('{0}Key', variables('logAnalyticsName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('logAnalyticsWorkspaceIdSecretName'))]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "contentType": "text/plain",
                        "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('logAnalyticsSubscriptionId'), variables('logAnalyticsResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2020-10-01').customerId]"
                      }
                    },
                    {
                      "type": "Microsoft.KeyVault/vaults/secrets",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[format('{0}/{1}', variables('keyVaultName'), variables('logAnalyticsWorkspaceKeySecretName'))]",
                      "properties": {
                        "attributes": {
                          "enabled": true
                        },
                        "contentType": "text/plain",
                        "value": "[listkeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('logAnalyticsSubscriptionId'), variables('logAnalyticsResourceGroupName')), 'Microsoft.OperationalInsights/workspaces', variables('logAnalyticsName')), '2020-10-01').primarySharedKey]"
                      }
                    }
                  ],
                  "outputs": {
                    "logAnalyticsWorkspaceIdSecretName": {
                      "type": "string",
                      "value": "[variables('logAnalyticsWorkspaceIdSecretName')]"
                    },
                    "logAnalyticsWorkspaceKeySecretName": {
                      "type": "string",
                      "value": "[variables('logAnalyticsWorkspaceKeySecretName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVault001')]",
                "[resourceId('Microsoft.Resources/deployments', 'logAnalytics001')]"
              ]
            }
          ],
          "outputs": {
            "logAnalytics001WorkspaceKeyVaultId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault001')).outputs.keyvaultId.value]"
            },
            "logAnalytics001WorkspaceIdSecretName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalytics001SecretDeployment')).outputs.logAnalyticsWorkspaceIdSecretName.value]"
            },
            "logAnalytics001WorkspaceKeySecretName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'logAnalytics001SecretDeployment')).outputs.logAnalyticsWorkspaceKeySecretName.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-logging', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "runtimeServices",
      "resourceGroup": "[format('{0}-runtimes', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.servicesSubnetId.value]"
          },
          "administratorUsername": {
            "value": "[variables('administratorUsername')]"
          },
          "administratorPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "privateDnsZoneIdDataFactory": {
            "value": "[parameters('privateDnsZoneIdDataFactory')]"
          },
          "privateDnsZoneIdDataFactoryPortal": {
            "value": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
          },
          "purviewId": {
            "value": "[parameters('purviewId')]"
          },
          "purviewSelfHostedIntegrationRuntimeAuthKey": {
            "value": "[parameters('purviewSelfHostedIntegrationRuntimeAuthKey')]"
          },
          "deploySelfHostedIntegrationRuntimes": {
            "value": "[parameters('deploySelfHostedIntegrationRuntimes')]"
          },
          "datafactoryIds": {
            "value": [
              "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', 'sharedIntegrationServices')).outputs.datafactoryIntegration001Id.value]"
            ]
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "10184856079799199139"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "administratorUsername": {
              "type": "string",
              "defaultValue": "VmssMainUser"
            },
            "administratorPassword": {
              "type": "secureString"
            },
            "privateDnsZoneIdDataFactory": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdDataFactoryPortal": {
              "type": "string",
              "defaultValue": ""
            },
            "purviewId": {
              "type": "string",
              "defaultValue": ""
            },
            "purviewSelfHostedIntegrationRuntimeAuthKey": {
              "type": "string",
              "defaultValue": ""
            },
            "deploySelfHostedIntegrationRuntimes": {
              "type": "bool",
              "defaultValue": false
            },
            "datafactoryIds": {
              "type": "array"
            }
          },
          "variables": {
            "datafactoryRuntimes001Name": "[format('{0}-runtime-datafactory001', parameters('prefix'))]",
            "shir001Name": "[format('{0}-shir001', parameters('prefix'))]",
            "shir002Name": "[format('{0}-shir002', parameters('prefix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DataFactory/factories/integrationRuntimes",
              "apiVersion": "2018-06-01",
              "name": "[format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name'))]",
              "properties": {
                "type": "SelfHosted",
                "description": "[format('Data Landing Zone - Self Hosted Integration Runtime running on {0}', variables('shir001Name'))]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'datafactoryRuntimes001')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "datafactoryRuntimes001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "datafactoryName": {
                    "value": "[variables('datafactoryRuntimes001Name')]"
                  },
                  "privateDnsZoneIdDataFactory": {
                    "value": "[parameters('privateDnsZoneIdDataFactory')]"
                  },
                  "privateDnsZoneIdDataFactoryPortal": {
                    "value": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
                  },
                  "purviewId": {
                    "value": "[parameters('purviewId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "11329504279778702907"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "datafactoryName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDataFactory": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdDataFactoryPortal": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "datafactoryDefaultManagedVnetIntegrationRuntimeName": "AutoResolveIntegrationRuntime",
                    "datafactoryPrivateEndpointNameDatafactory": "[format('{0}-datafactory-private-endpoint', parameters('datafactoryName'))]",
                    "datafactoryPrivateEndpointNamePortal": "[format('{0}-portal-private-endpoint', parameters('datafactoryName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DataFactory/factories",
                      "apiVersion": "2018-06-01",
                      "name": "[parameters('datafactoryName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "globalParameters": {},
                        "publicNetworkAccess": "Disabled",
                        "purviewConfiguration": {
                          "purviewResourceId": "[parameters('purviewId')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('datafactoryPrivateEndpointNameDatafactory')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('datafactoryPrivateEndpointNameDatafactory')]",
                            "properties": {
                              "groupIds": [
                                "dataFactory"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDataFactory')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('datafactoryPrivateEndpointNameDatafactory'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('datafactoryPrivateEndpointNameDatafactory'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDataFactory')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('datafactoryPrivateEndpointNameDatafactory'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('datafactoryPrivateEndpointNamePortal')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('datafactoryPrivateEndpointNamePortal')]",
                            "properties": {
                              "groupIds": [
                                "portal"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDataFactoryPortal')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('datafactoryPrivateEndpointNamePortal'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('datafactoryPrivateEndpointNamePortal'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('datafactoryPrivateEndpointNamePortal'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                      "properties": {
                        "type": "Managed",
                        "managedVirtualNetwork": {
                          "type": "ManagedVirtualNetworkReference",
                          "referenceName": "default"
                        },
                        "typeProperties": {
                          "computeProperties": {
                            "location": "AutoResolve"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    }
                  ],
                  "outputs": {
                    "datafactoryId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('deploySelfHostedIntegrationRuntimes')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "datafactoryRuntimes001SelfHostedIntegrationRuntime001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "administratorUsername": {
                    "value": "[parameters('administratorUsername')]"
                  },
                  "administratorPassword": {
                    "value": "[parameters('administratorPassword')]"
                  },
                  "datafactoryIntegrationRuntimeAuthKey": {
                    "value": "[listAuthKeys(resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[0], split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[1]), '2018-06-01').authKey1]"
                  },
                  "vmssName": {
                    "value": "[variables('shir001Name')]"
                  },
                  "vmssSkuCapacity": {
                    "value": 1
                  },
                  "vmssSkuName": {
                    "value": "Standard_DS2_v2"
                  },
                  "vmssSkuTier": {
                    "value": "Standard"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "13750788851673053960"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "vmssName": {
                      "type": "string"
                    },
                    "vmssSkuName": {
                      "type": "string",
                      "defaultValue": "Standard_DS2_v2"
                    },
                    "vmssSkuTier": {
                      "type": "string",
                      "defaultValue": "Standard"
                    },
                    "vmssSkuCapacity": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "administratorUsername": {
                      "type": "string",
                      "defaultValue": "VmssMainUser"
                    },
                    "administratorPassword": {
                      "type": "secureString"
                    },
                    "datafactoryIntegrationRuntimeAuthKey": {
                      "type": "secureString"
                    }
                  },
                  "variables": {
                    "$fxv#0": "IyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4NCiMgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLg0KDQojIERlZmluZSBzY3JpcHQgYXJndW1lbnRzDQpbQ21kbGV0QmluZGluZygpXQ0KcGFyYW0gKA0KCVtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KCVtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldDQoJW1N0cmluZ10NCgkkZ2F0ZXdheUtleSwNCg0KCVtQYXJhbWV0ZXIoRG9udFNob3cpXQ0KCVtTdHJpbmddDQoJJGdhdGV3YXlVcmkgPSAiaHR0cHM6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/bGlua2lkPTgzOTgyMiINCikNCg0KIyBEZWZpbmUgdmFyaWFibGVzDQokZ2F0ZXdheVBhdGggPSAiJFBXRFxnYXRld2F5Lm1zaSINCiRsb2dMb2MgPSAiJGVudjpTeXN0ZW1Ecml2ZVxXaW5kb3dzQXp1cmVcTG9nc1xQbHVnaW5zXE1pY3Jvc29mdC5Db21wdXRlLkN1c3RvbVNjcmlwdEV4dGVuc2lvblwiDQokbG9nUGF0aCA9ICIkbG9nTG9jXHRyYWNlbG9nLmxvZyINCg0KZnVuY3Rpb24gTmV3LUVycm9yKFtzdHJpbmddICRtc2cpIHsNCgl0cnkgew0KCQl0aHJvdyAkbXNnDQoJfQ0KCWNhdGNoIHsNCgkJJHN0YWNrID0gJF8uU2NyaXB0U3RhY2tUcmFjZQ0KCQlUcmFjZS1Mb2cgIkRNRFRUUCBpcyBmYWlsZWQ6ICRtc2dgblN0YWNrOmBuJHN0YWNrIg0KCX0NCgl0aHJvdyAkbXNnDQp9DQoNCmZ1bmN0aW9uIFRyYWNlLUxvZyhbc3RyaW5nXSAkbXNnKSB7DQoJJG5vdyA9IEdldC1EYXRlIC1Gb3JtYXQgInl5eXktTU0tZGQgSEg6bW06c3MiDQoJdHJ5IHsNCgkJIiR7bm93fSAkbXNnYG4iIHwgT3V0LUZpbGUgJGxvZ1BhdGggLUFwcGVuZA0KCX0NCgljYXRjaCB7DQoJCVdyaXRlLUVycm9yICJFcnJvciB3aGVuIHdyaXRpbmcgdHJhY2UgbG9nIg0KCX0NCn0NCg0KZnVuY3Rpb24gSW52b2tlLVByb2Nlc3MoW3N0cmluZ10gJHByb2Nlc3MsIFtzdHJpbmddICRhcmd1bWVudHMpIHsNCglXcml0ZS1WZXJib3NlICJSdW4tUHJvY2VzczogJHByb2Nlc3MgJGFyZ3VtZW50cyINCg0KCSRlcnJvckZpbGUgPSAiJGVudjp0bXBcdG1wJHBpZC5lcnIiDQoJJG91dEZpbGUgPSAiJGVudjp0bXBcdG1wJHBpZC5vdXQiDQoJIiIgfCBPdXQtRmlsZSAkb3V0RmlsZQ0KCSIiIHwgT3V0LUZpbGUgJGVycm9yRmlsZQ0KDQoJJGVyclZhcmlhYmxlID0gIiINCg0KCWlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkYXJndW1lbnRzKSkgew0KCQkkcHJvYyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRwcm9jZXNzIC1XYWl0IC1QYXNzdGhydSAtTm9OZXdXaW5kb3cgYA0KCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlDQoJfQ0KCWVsc2Ugew0KCQkkcHJvYyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRwcm9jZXNzIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50cyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGANCgkJCS1SZWRpcmVjdFN0YW5kYXJkRXJyb3IgJGVycm9yRmlsZSAtUmVkaXJlY3RTdGFuZGFyZE91dHB1dCAkb3V0RmlsZSAtRXJyb3JWYXJpYWJsZSBlcnJWYXJpYWJsZQ0KCX0NCg0KCSRlcnJDb250ZW50ID0gW3N0cmluZ10gKEdldC1Db250ZW50IC1QYXRoICRlcnJvckZpbGUgLURlbGltaXRlciAiISEhRG9lc05vdEV4aXN0ISEhIikNCgkkb3V0Q29udGVudCA9IFtzdHJpbmddIChHZXQtQ29udGVudCAtUGF0aCAkb3V0RmlsZSAtRGVsaW1pdGVyICIhISFEb2VzTm90RXhpc3QhISEiKQ0KDQoJUmVtb3ZlLUl0ZW0gJGVycm9yRmlsZQ0KCVJlbW92ZS1JdGVtICRvdXRGaWxlDQoNCglpZiAoJHByb2MuRXhpdENvZGUgLW5lIDAgLW9yICRlcnJWYXJpYWJsZSAtbmUgIiIpIHsNCgkJTmV3LUVycm9yICJGYWlsZWQgdG8gcnVuIHByb2Nlc3M6IGV4aXRDb2RlPSQoJHByb2MuRXhpdENvZGUpLCBlcnJWYXJpYWJsZT0kZXJyVmFyaWFibGUsIGVyckNvbnRlbnQ9JGVyckNvbnRlbnQsIG91dENvbnRlbnQ9JG91dENvbnRlbnQuIg0KCX0NCg0KCVRyYWNlLUxvZyAiUnVuLVByb2Nlc3M6IEV4aXRDb2RlPSQoJHByb2MuRXhpdENvZGUpLCBvdXRwdXQ9JG91dENvbnRlbnQiDQoNCglpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJG91dENvbnRlbnQpKSB7DQoJCXJldHVybiAkb3V0Q29udGVudA0KCX0NCg0KCXJldHVybiAkb3V0Q29udGVudC5UcmltKCkNCn0NCg0KZnVuY3Rpb24gR2V0LUdhdGV3YXkoW3N0cmluZ10gJHVybCwgW3N0cmluZ10gJGdhdGV3YXlQYXRoKSB7DQoJdHJ5IHsNCgkJJEVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICJTdG9wIjsNCgkJJGNsaWVudCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQNCgkJJGNsaWVudC5Eb3dubG9hZEZpbGUoJHVybCwgJGdhdGV3YXlQYXRoKQ0KCQlUcmFjZS1Mb2cgIkRvd25sb2FkIGdhdGV3YXkgc3VjY2Vzc2Z1bGx5LiBHYXRld2F5IGxvYzogJHtnYXRld2F5UGF0aH0iDQoJfQ0KCWNhdGNoIHsNCgkJVHJhY2UtTG9nICJGYWlsIHRvIGRvd25sb2FkIGdhdGV3YXkgbXNpIg0KCQlUcmFjZS1Mb2cgJF8uRXhjZXB0aW9uLlRvU3RyaW5nKCkNCgkJdGhyb3cNCgl9DQp9DQoNCmZ1bmN0aW9uIEluc3RhbGwtR2F0ZXdheShbc3RyaW5nXSAkZ2F0ZXdheVBhdGgpIHsNCglpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGdhdGV3YXlQYXRoKSkgew0KCQlOZXctRXJyb3IgIkdhdGV3YXkgcGF0aCBpcyBub3Qgc3BlY2lmaWVkIg0KCX0NCglpZiAoIShUZXN0LVBhdGggLVBhdGggJGdhdGV3YXlQYXRoKSkgew0KCQlOZXctRXJyb3IgIkludmFsaWQgZ2F0ZXdheSBwYXRoOiAke2dhdGV3YXlQYXRofSINCgl9DQoJVHJhY2UtTG9nICJTdGFydCBHYXRld2F5IGluc3RhbGxhdGlvbiINCglJbnZva2UtUHJvY2VzcyAibXNpZXhlYy5leGUiICIvaSBnYXRld2F5Lm1zaSBJTlNUQUxMVFlQRT1BenVyZVRlbXBsYXRlIC9xdWlldCAvbm9yZXN0YXJ0Ig0KCVN0YXJ0LVNsZWVwIC1TZWNvbmRzIDMwDQoJVHJhY2UtTG9nICJJbnN0YWxsYXRpb24gb2YgZ2F0ZXdheSBpcyBzdWNjZXNzZnVsIg0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVnaXN0cnlQcm9wZXJ0eShbc3RyaW5nXSAka2V5UGF0aCwgW3N0cmluZ10gJHByb3BlcnR5KSB7DQoJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogR2V0ICRwcm9wZXJ0eSBmcm9tICRrZXlQYXRoIg0KCWlmICghIChUZXN0LVBhdGggJGtleVBhdGgpKSB7DQoJCVRyYWNlLUxvZyAiR2V0LVJlZ2lzdHJ5UHJvcGVydHk6ICRrZXlQYXRoIGRvZXMgbm90IGV4aXN0Ig0KCX0NCg0KCSRrZXlSZWcgPSBHZXQtSXRlbSAka2V5UGF0aA0KCWlmICghICgka2V5UmVnLlByb3BlcnR5IC1jb250YWlucyAkcHJvcGVydHkpKSB7DQoJCVRyYWNlLUxvZyAiR2V0LVJlZ2lzdHJ5UHJvcGVydHk6ICRwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCINCgkJcmV0dXJuICIiDQoJfQ0KCXJldHVybiAka2V5UmVnLkdldFZhbHVlKCRwcm9wZXJ0eSkNCn0NCg0KZnVuY3Rpb24gR2V0LUluc3RhbGxlZEZpbGVQYXRoKCkgew0KCSRmaWxlUGF0aCA9IEdldC1SZWdpc3RyeVByb3BlcnR5ICJoa2xtOlxTb2Z0d2FyZVxNaWNyb3NvZnRcRGF0YVRyYW5zZmVyXERhdGFNYW5hZ2VtZW50R2F0ZXdheVxDb25maWd1cmF0aW9uTWFuYWdlciIgIkRpYWNtZFBhdGgiDQoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRmaWxlUGF0aCkpIHsNCgkJTmV3LUVycm9yICJHZXQtSW5zdGFsbGVkRmlsZVBhdGg6IENhbm5vdCBmaW5kIGluc3RhbGxlZCBGaWxlIFBhdGgiDQoJfQ0KCVRyYWNlLUxvZyAiR2F0ZXdheSBpbnN0YWxsYXRpb24gZmlsZTogJGZpbGVQYXRoIg0KCXJldHVybiAkZmlsZVBhdGgNCn0NCg0KZnVuY3Rpb24gUmVnaXN0ZXItR2F0ZXdheShbc3RyaW5nXSAkaW5zdGFuY2VLZXkpIHsNCglUcmFjZS1Mb2cgIlJlZ2lzdGVyIEFnZW50Ig0KCSRmaWxlUGF0aCA9IEdldC1JbnN0YWxsZWRGaWxlUGF0aA0KCUludm9rZS1Qcm9jZXNzICRmaWxlUGF0aCAiLWVyYSA4MDYwIg0KCUludm9rZS1Qcm9jZXNzICRmaWxlUGF0aCAiLWsgJGluc3RhbmNlS2V5Ig0KCVRyYWNlLUxvZyAiQWdlbnQgcmVnaXN0cmF0aW9uIGlzIHN1Y2Nlc3NmdWwhIg0KfQ0KDQojIEluaXQgbG9nIHNldHRpbmdzDQppZiAoIShUZXN0LVBhdGgoJGxvZ0xvYykpKSB7DQoJTmV3LUl0ZW0gLVBhdGggJGxvZ0xvYyAtSXRlbVR5cGUgRGlyZWN0b3J5IC1Gb3JjZQ0KfQ0KIlN0YXJ0IHRvIGV4Y3V0ZSBnYXRld2F5SW5zdGFsbC5wczEuIGBuIiB8IE91dC1GaWxlICRsb2dQYXRoDQpUcmFjZS1Mb2cgIkxvZyBmaWxlOiAkbG9nTG9jIg0KVHJhY2UtTG9nICJHYXRld2F5IGRvd25sb2FkIGZ3IGxpbms6ICR7Z2F0ZXdheVVyaX0iDQpUcmFjZS1Mb2cgIkdhdGV3YXkgZG93bmxvYWQgbG9jYXRpb246ICR7Z2F0ZXdheVBhdGh9Ig0KDQpHZXQtR2F0ZXdheSAkZ2F0ZXdheVVyaSAkZ2F0ZXdheVBhdGgNCkluc3RhbGwtR2F0ZXdheSAkZ2F0ZXdheVBhdGgNClJlZ2lzdGVyLUdhdGV3YXkgJGdhdGV3YXlLZXkNCg==",
                    "loadbalancerName": "[format('{0}-lb', parameters('vmssName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2021-03-01",
                      "name": "[variables('loadbalancerName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Basic"
                      },
                      "properties": {
                        "backendAddressPools": [
                          {
                            "name": "[format('{0}-backendaddresspool', parameters('vmssName'))]"
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "frontendipconfiguration",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              }
                            }
                          }
                        ],
                        "inboundNatPools": [
                          {
                            "name": "[format('{0}-natpool', parameters('vmssName'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadbalancerName'), 'frontendipconfiguration')]"
                              },
                              "protocol": "Tcp",
                              "frontendPortRangeStart": 50000,
                              "frontendPortRangeEnd": 50099,
                              "backendPort": 3389,
                              "idleTimeoutInMinutes": 4
                            }
                          }
                        ],
                        "loadBalancingRules": [
                          {
                            "name": "proberule",
                            "properties": {
                              "loadDistribution": "Default",
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadbalancerName'), format('{0}-backendaddresspool', parameters('vmssName')))]"
                              },
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadbalancerName'), 'frontendipconfiguration')]"
                              },
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadbalancerName'), format('{0}-probe', parameters('vmssName')))]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 80,
                              "backendPort": 80,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "[format('{0}-probe', parameters('vmssName'))]",
                            "properties": {
                              "protocol": "Http",
                              "port": 80,
                              "requestPath": "/",
                              "intervalInSeconds": 5,
                              "numberOfProbes": 2
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachineScaleSets",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('vmssName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[parameters('vmssSkuName')]",
                        "tier": "[parameters('vmssSkuTier')]",
                        "capacity": "[parameters('vmssSkuCapacity')]"
                      },
                      "properties": {
                        "additionalCapabilities": {},
                        "automaticRepairsPolicy": {},
                        "doNotRunExtensionsOnOverprovisionedVMs": true,
                        "overprovision": true,
                        "platformFaultDomainCount": 1,
                        "scaleInPolicy": {
                          "rules": [
                            "Default"
                          ]
                        },
                        "singlePlacementGroup": true,
                        "upgradePolicy": {
                          "mode": "Automatic"
                        },
                        "virtualMachineProfile": {
                          "priority": "Regular",
                          "osProfile": {
                            "adminUsername": "[parameters('administratorUsername')]",
                            "adminPassword": "[parameters('administratorPassword')]",
                            "computerNamePrefix": "[take(parameters('vmssName'), 9)]",
                            "customData": "[variables('$fxv#0')]",
                            "windowsConfiguration": {
                              "enableAutomaticUpdates": true,
                              "patchSettings": {
                                "assessmentMode": "AutomaticByPlatform",
                                "enableHotpatching": false,
                                "patchMode": "AutomaticByPlatform"
                              },
                              "provisionVMAgent": true
                            }
                          },
                          "networkProfile": {
                            "networkInterfaceConfigurations": [
                              {
                                "name": "[format('{0}-nic', parameters('vmssName'))]",
                                "properties": {
                                  "primary": true,
                                  "dnsSettings": {},
                                  "enableAcceleratedNetworking": false,
                                  "enableFpga": false,
                                  "enableIPForwarding": false,
                                  "ipConfigurations": [
                                    {
                                      "name": "[format('{0}-ipconfig', parameters('vmssName'))]",
                                      "properties": {
                                        "loadBalancerBackendAddressPools": [
                                          {
                                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadbalancerName'), format('{0}-backendaddresspool', parameters('vmssName')))]"
                                          }
                                        ],
                                        "loadBalancerInboundNatPools": [
                                          {
                                            "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', variables('loadbalancerName'), format('{0}-natpool', parameters('vmssName')))]"
                                          }
                                        ],
                                        "primary": true,
                                        "privateIPAddressVersion": "IPv4",
                                        "subnet": {
                                          "id": "[parameters('subnetId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "storageProfile": {
                            "imageReference": {
                              "offer": "WindowsServer",
                              "publisher": "MicrosoftWindowsServer",
                              "sku": "2022-datacenter-azure-edition",
                              "version": "latest"
                            },
                            "osDisk": {
                              "caching": "ReadWrite",
                              "createOption": "FromImage"
                            }
                          },
                          "extensionProfile": {
                            "extensions": [
                              {
                                "name": "[format('{0}-integrationruntime-shir', parameters('vmssName'))]",
                                "properties": {
                                  "publisher": "Microsoft.Compute",
                                  "type": "CustomScriptExtension",
                                  "typeHandlerVersion": "1.10",
                                  "autoUpgradeMinorVersion": true,
                                  "settings": {
                                    "fileUris": []
                                  },
                                  "protectedSettings": {
                                    "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -command \"cp c:/azuredata/customdata.bin c:/azuredata/installSHIRGateway.ps1; c:/azuredata/installSHIRGateway.ps1 -gatewayKey \"{0}\"', parameters('datafactoryIntegrationRuntimeAuthKey'))]"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[0], split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[1])]"
              ]
            },
            {
              "condition": "[parameters('deploySelfHostedIntegrationRuntimes')]",
              "copy": {
                "name": "shareDatafactoryRuntimes001IntegrationRuntime001",
                "count": "[length(parameters('datafactoryIds'))]"
              },
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "[format('shareDatafactoryRuntimes001IntegrationRuntime001-{0}', copyIndex())]",
              "subscriptionId": "[split(parameters('datafactoryIds')[copyIndex()], '/')[2]]",
              "resourceGroup": "[split(parameters('datafactoryIds')[copyIndex()], '/')[4]]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "datafactorySourceId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datafactoryRuntimes001')).outputs.datafactoryId.value]"
                  },
                  "datafactorySourceShirId": {
                    "value": "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[0], split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[1])]"
                  },
                  "datafactoryDestinationId": {
                    "value": "[parameters('datafactoryIds')[copyIndex()]]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "4199444479569342703"
                    }
                  },
                  "parameters": {
                    "datafactorySourceId": {
                      "type": "string"
                    },
                    "datafactorySourceShirId": {
                      "type": "string"
                    },
                    "datafactoryDestinationId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "datafactorySourceSubscriptionId": "[if(greaterOrEquals(length(split(parameters('datafactorySourceId'), '/')), 9), split(parameters('datafactorySourceId'), '/')[2], subscription().subscriptionId)]",
                    "datafactorySourceResourceGroup": "[if(greaterOrEquals(length(split(parameters('datafactorySourceId'), '/')), 9), split(parameters('datafactorySourceId'), '/')[4], resourceGroup().name)]",
                    "datafactorySourceShirName": "[if(greaterOrEquals(length(split(parameters('datafactorySourceShirId'), '/')), 11), last(split(parameters('datafactorySourceShirId'), '/')), 'incorrectSegmentLength')]",
                    "datafactoryDestinationName": "[if(greaterOrEquals(length(split(parameters('datafactoryDestinationId'), '/')), 9), last(split(parameters('datafactoryDestinationId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', variables('datafactoryDestinationName'), variables('datafactorySourceShirName'))]",
                      "properties": {
                        "type": "SelfHosted",
                        "description": "Data Landing Zone - Self-hosted Integration Runtime",
                        "typeProperties": {
                          "linkedInfo": {
                            "authorizationType": "RBAC",
                            "resourceId": "[parameters('datafactorySourceShirId')]"
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySourceSubscriptionId'), variables('datafactorySourceResourceGroup')), 'Microsoft.Resources/deployments', 'datafactoryDestinationRoleAssignment')]",
                        "deploymentDelay"
                      ]
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "datafactoryDestinationRoleAssignment",
                      "subscriptionId": "[variables('datafactorySourceSubscriptionId')]",
                      "resourceGroup": "[variables('datafactorySourceResourceGroup')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "datafactorySourceId": {
                            "value": "[parameters('datafactorySourceId')]"
                          },
                          "datafactoryDestinationId": {
                            "value": "[parameters('datafactoryDestinationId')]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.11.1.770",
                              "templateHash": "11554309559353951972"
                            }
                          },
                          "parameters": {
                            "datafactorySourceId": {
                              "type": "string"
                            },
                            "datafactoryDestinationId": {
                              "type": "string"
                            }
                          },
                          "variables": {
                            "datafactorySourceName": "[if(greaterOrEquals(length(split(parameters('datafactorySourceId'), '/')), 9), last(split(parameters('datafactorySourceId'), '/')), 'incorrectSegmentLength')]",
                            "datafactoryDestinationSubscriptionId": "[if(greaterOrEquals(length(split(parameters('datafactoryDestinationId'), '/')), 9), split(parameters('datafactoryDestinationId'), '/')[2], subscription().subscriptionId)]",
                            "datafactoryDestinationResourceGroup": "[if(greaterOrEquals(length(split(parameters('datafactoryDestinationId'), '/')), 9), split(parameters('datafactoryDestinationId'), '/')[4], resourceGroup().name)]",
                            "datafactoryDestinationName": "[if(greaterOrEquals(length(split(parameters('datafactoryDestinationId'), '/')), 9), last(split(parameters('datafactoryDestinationId'), '/')), 'incorrectSegmentLength')]"
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Authorization/roleAssignments",
                              "apiVersion": "2020-04-01-preview",
                              "scope": "[format('Microsoft.DataFactory/factories/{0}', variables('datafactorySourceName'))]",
                              "name": "[guid(uniqueString(resourceId('Microsoft.DataFactory/factories', variables('datafactorySourceName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactoryDestinationSubscriptionId'), variables('datafactoryDestinationResourceGroup')), 'Microsoft.DataFactory/factories', variables('datafactoryDestinationName'))))]",
                              "properties": {
                                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactoryDestinationSubscriptionId'), variables('datafactoryDestinationResourceGroup')), 'Microsoft.DataFactory/factories', variables('datafactoryDestinationName')), '2018-06-01', 'full').identity.principalId]",
                                "principalType": "ServicePrincipal"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "copy": {
                        "name": "deploymentDelay",
                        "count": "[length(range(0, 10))]",
                        "mode": "serial",
                        "batchSize": 1
                      },
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2020-10-01",
                      "name": "[format('delay-{0}', range(0, 10)[copyIndex()])]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "deploymentDelayIndex": {
                            "value": "[range(0, 10)[copyIndex()]]"
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.11.1.770",
                              "templateHash": "7125262587694497861"
                            }
                          },
                          "parameters": {
                            "deploymentDelayIndex": {
                              "type": "int"
                            }
                          },
                          "resources": [],
                          "outputs": {
                            "deploymentDelayIndex": {
                              "type": "int",
                              "value": "[parameters('deploymentDelayIndex')]"
                            }
                          }
                        }
                      },
                      "dependsOn": [
                        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySourceSubscriptionId'), variables('datafactorySourceResourceGroup')), 'Microsoft.Resources/deployments', 'datafactoryDestinationRoleAssignment')]"
                      ]
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'datafactoryRuntimes001')]",
                "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[0], split(format('{0}/dataLandingZoneShir-{1}', variables('datafactoryRuntimes001Name'), variables('shir001Name')), '/')[1])]",
                "[resourceId('Microsoft.Resources/deployments', 'datafactoryRuntimes001SelfHostedIntegrationRuntime001')]"
              ]
            },
            {
              "condition": "[and(parameters('deploySelfHostedIntegrationRuntimes'), not(equals(parameters('purviewSelfHostedIntegrationRuntimeAuthKey'), '')))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "purviewSelfHostedIntegrationRuntime001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "administratorUsername": {
                    "value": "[parameters('administratorUsername')]"
                  },
                  "administratorPassword": {
                    "value": "[parameters('administratorPassword')]"
                  },
                  "datafactoryIntegrationRuntimeAuthKey": {
                    "value": "[parameters('purviewSelfHostedIntegrationRuntimeAuthKey')]"
                  },
                  "vmssName": {
                    "value": "[variables('shir002Name')]"
                  },
                  "vmssSkuCapacity": {
                    "value": 1
                  },
                  "vmssSkuName": {
                    "value": "Standard_DS2_v2"
                  },
                  "vmssSkuTier": {
                    "value": "Standard"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "13750788851673053960"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "vmssName": {
                      "type": "string"
                    },
                    "vmssSkuName": {
                      "type": "string",
                      "defaultValue": "Standard_DS2_v2"
                    },
                    "vmssSkuTier": {
                      "type": "string",
                      "defaultValue": "Standard"
                    },
                    "vmssSkuCapacity": {
                      "type": "int",
                      "defaultValue": 1
                    },
                    "administratorUsername": {
                      "type": "string",
                      "defaultValue": "VmssMainUser"
                    },
                    "administratorPassword": {
                      "type": "secureString"
                    },
                    "datafactoryIntegrationRuntimeAuthKey": {
                      "type": "secureString"
                    }
                  },
                  "variables": {
                    "$fxv#0": "IyBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4NCiMgTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLg0KDQojIERlZmluZSBzY3JpcHQgYXJndW1lbnRzDQpbQ21kbGV0QmluZGluZygpXQ0KcGFyYW0gKA0KCVtQYXJhbWV0ZXIoTWFuZGF0b3J5ID0gJHRydWUpXQ0KCVtWYWxpZGF0ZU5vdE51bGxPckVtcHR5KCldDQoJW1N0cmluZ10NCgkkZ2F0ZXdheUtleSwNCg0KCVtQYXJhbWV0ZXIoRG9udFNob3cpXQ0KCVtTdHJpbmddDQoJJGdhdGV3YXlVcmkgPSAiaHR0cHM6Ly9nby5taWNyb3NvZnQuY29tL2Z3bGluay8/bGlua2lkPTgzOTgyMiINCikNCg0KIyBEZWZpbmUgdmFyaWFibGVzDQokZ2F0ZXdheVBhdGggPSAiJFBXRFxnYXRld2F5Lm1zaSINCiRsb2dMb2MgPSAiJGVudjpTeXN0ZW1Ecml2ZVxXaW5kb3dzQXp1cmVcTG9nc1xQbHVnaW5zXE1pY3Jvc29mdC5Db21wdXRlLkN1c3RvbVNjcmlwdEV4dGVuc2lvblwiDQokbG9nUGF0aCA9ICIkbG9nTG9jXHRyYWNlbG9nLmxvZyINCg0KZnVuY3Rpb24gTmV3LUVycm9yKFtzdHJpbmddICRtc2cpIHsNCgl0cnkgew0KCQl0aHJvdyAkbXNnDQoJfQ0KCWNhdGNoIHsNCgkJJHN0YWNrID0gJF8uU2NyaXB0U3RhY2tUcmFjZQ0KCQlUcmFjZS1Mb2cgIkRNRFRUUCBpcyBmYWlsZWQ6ICRtc2dgblN0YWNrOmBuJHN0YWNrIg0KCX0NCgl0aHJvdyAkbXNnDQp9DQoNCmZ1bmN0aW9uIFRyYWNlLUxvZyhbc3RyaW5nXSAkbXNnKSB7DQoJJG5vdyA9IEdldC1EYXRlIC1Gb3JtYXQgInl5eXktTU0tZGQgSEg6bW06c3MiDQoJdHJ5IHsNCgkJIiR7bm93fSAkbXNnYG4iIHwgT3V0LUZpbGUgJGxvZ1BhdGggLUFwcGVuZA0KCX0NCgljYXRjaCB7DQoJCVdyaXRlLUVycm9yICJFcnJvciB3aGVuIHdyaXRpbmcgdHJhY2UgbG9nIg0KCX0NCn0NCg0KZnVuY3Rpb24gSW52b2tlLVByb2Nlc3MoW3N0cmluZ10gJHByb2Nlc3MsIFtzdHJpbmddICRhcmd1bWVudHMpIHsNCglXcml0ZS1WZXJib3NlICJSdW4tUHJvY2VzczogJHByb2Nlc3MgJGFyZ3VtZW50cyINCg0KCSRlcnJvckZpbGUgPSAiJGVudjp0bXBcdG1wJHBpZC5lcnIiDQoJJG91dEZpbGUgPSAiJGVudjp0bXBcdG1wJHBpZC5vdXQiDQoJIiIgfCBPdXQtRmlsZSAkb3V0RmlsZQ0KCSIiIHwgT3V0LUZpbGUgJGVycm9yRmlsZQ0KDQoJJGVyclZhcmlhYmxlID0gIiINCg0KCWlmIChbc3RyaW5nXTo6SXNOdWxsT3JFbXB0eSgkYXJndW1lbnRzKSkgew0KCQkkcHJvYyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRwcm9jZXNzIC1XYWl0IC1QYXNzdGhydSAtTm9OZXdXaW5kb3cgYA0KCQkJLVJlZGlyZWN0U3RhbmRhcmRFcnJvciAkZXJyb3JGaWxlIC1SZWRpcmVjdFN0YW5kYXJkT3V0cHV0ICRvdXRGaWxlIC1FcnJvclZhcmlhYmxlIGVyclZhcmlhYmxlDQoJfQ0KCWVsc2Ugew0KCQkkcHJvYyA9IFN0YXJ0LVByb2Nlc3MgLUZpbGVQYXRoICRwcm9jZXNzIC1Bcmd1bWVudExpc3QgJGFyZ3VtZW50cyAtV2FpdCAtUGFzc3RocnUgLU5vTmV3V2luZG93IGANCgkJCS1SZWRpcmVjdFN0YW5kYXJkRXJyb3IgJGVycm9yRmlsZSAtUmVkaXJlY3RTdGFuZGFyZE91dHB1dCAkb3V0RmlsZSAtRXJyb3JWYXJpYWJsZSBlcnJWYXJpYWJsZQ0KCX0NCg0KCSRlcnJDb250ZW50ID0gW3N0cmluZ10gKEdldC1Db250ZW50IC1QYXRoICRlcnJvckZpbGUgLURlbGltaXRlciAiISEhRG9lc05vdEV4aXN0ISEhIikNCgkkb3V0Q29udGVudCA9IFtzdHJpbmddIChHZXQtQ29udGVudCAtUGF0aCAkb3V0RmlsZSAtRGVsaW1pdGVyICIhISFEb2VzTm90RXhpc3QhISEiKQ0KDQoJUmVtb3ZlLUl0ZW0gJGVycm9yRmlsZQ0KCVJlbW92ZS1JdGVtICRvdXRGaWxlDQoNCglpZiAoJHByb2MuRXhpdENvZGUgLW5lIDAgLW9yICRlcnJWYXJpYWJsZSAtbmUgIiIpIHsNCgkJTmV3LUVycm9yICJGYWlsZWQgdG8gcnVuIHByb2Nlc3M6IGV4aXRDb2RlPSQoJHByb2MuRXhpdENvZGUpLCBlcnJWYXJpYWJsZT0kZXJyVmFyaWFibGUsIGVyckNvbnRlbnQ9JGVyckNvbnRlbnQsIG91dENvbnRlbnQ9JG91dENvbnRlbnQuIg0KCX0NCg0KCVRyYWNlLUxvZyAiUnVuLVByb2Nlc3M6IEV4aXRDb2RlPSQoJHByb2MuRXhpdENvZGUpLCBvdXRwdXQ9JG91dENvbnRlbnQiDQoNCglpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJG91dENvbnRlbnQpKSB7DQoJCXJldHVybiAkb3V0Q29udGVudA0KCX0NCg0KCXJldHVybiAkb3V0Q29udGVudC5UcmltKCkNCn0NCg0KZnVuY3Rpb24gR2V0LUdhdGV3YXkoW3N0cmluZ10gJHVybCwgW3N0cmluZ10gJGdhdGV3YXlQYXRoKSB7DQoJdHJ5IHsNCgkJJEVycm9yQWN0aW9uUHJlZmVyZW5jZSA9ICJTdG9wIjsNCgkJJGNsaWVudCA9IE5ldy1PYmplY3QgU3lzdGVtLk5ldC5XZWJDbGllbnQNCgkJJGNsaWVudC5Eb3dubG9hZEZpbGUoJHVybCwgJGdhdGV3YXlQYXRoKQ0KCQlUcmFjZS1Mb2cgIkRvd25sb2FkIGdhdGV3YXkgc3VjY2Vzc2Z1bGx5LiBHYXRld2F5IGxvYzogJHtnYXRld2F5UGF0aH0iDQoJfQ0KCWNhdGNoIHsNCgkJVHJhY2UtTG9nICJGYWlsIHRvIGRvd25sb2FkIGdhdGV3YXkgbXNpIg0KCQlUcmFjZS1Mb2cgJF8uRXhjZXB0aW9uLlRvU3RyaW5nKCkNCgkJdGhyb3cNCgl9DQp9DQoNCmZ1bmN0aW9uIEluc3RhbGwtR2F0ZXdheShbc3RyaW5nXSAkZ2F0ZXdheVBhdGgpIHsNCglpZiAoW3N0cmluZ106OklzTnVsbE9yRW1wdHkoJGdhdGV3YXlQYXRoKSkgew0KCQlOZXctRXJyb3IgIkdhdGV3YXkgcGF0aCBpcyBub3Qgc3BlY2lmaWVkIg0KCX0NCglpZiAoIShUZXN0LVBhdGggLVBhdGggJGdhdGV3YXlQYXRoKSkgew0KCQlOZXctRXJyb3IgIkludmFsaWQgZ2F0ZXdheSBwYXRoOiAke2dhdGV3YXlQYXRofSINCgl9DQoJVHJhY2UtTG9nICJTdGFydCBHYXRld2F5IGluc3RhbGxhdGlvbiINCglJbnZva2UtUHJvY2VzcyAibXNpZXhlYy5leGUiICIvaSBnYXRld2F5Lm1zaSBJTlNUQUxMVFlQRT1BenVyZVRlbXBsYXRlIC9xdWlldCAvbm9yZXN0YXJ0Ig0KCVN0YXJ0LVNsZWVwIC1TZWNvbmRzIDMwDQoJVHJhY2UtTG9nICJJbnN0YWxsYXRpb24gb2YgZ2F0ZXdheSBpcyBzdWNjZXNzZnVsIg0KfQ0KDQpmdW5jdGlvbiBHZXQtUmVnaXN0cnlQcm9wZXJ0eShbc3RyaW5nXSAka2V5UGF0aCwgW3N0cmluZ10gJHByb3BlcnR5KSB7DQoJVHJhY2UtTG9nICJHZXQtUmVnaXN0cnlQcm9wZXJ0eTogR2V0ICRwcm9wZXJ0eSBmcm9tICRrZXlQYXRoIg0KCWlmICghIChUZXN0LVBhdGggJGtleVBhdGgpKSB7DQoJCVRyYWNlLUxvZyAiR2V0LVJlZ2lzdHJ5UHJvcGVydHk6ICRrZXlQYXRoIGRvZXMgbm90IGV4aXN0Ig0KCX0NCg0KCSRrZXlSZWcgPSBHZXQtSXRlbSAka2V5UGF0aA0KCWlmICghICgka2V5UmVnLlByb3BlcnR5IC1jb250YWlucyAkcHJvcGVydHkpKSB7DQoJCVRyYWNlLUxvZyAiR2V0LVJlZ2lzdHJ5UHJvcGVydHk6ICRwcm9wZXJ0eSBkb2VzIG5vdCBleGlzdCINCgkJcmV0dXJuICIiDQoJfQ0KCXJldHVybiAka2V5UmVnLkdldFZhbHVlKCRwcm9wZXJ0eSkNCn0NCg0KZnVuY3Rpb24gR2V0LUluc3RhbGxlZEZpbGVQYXRoKCkgew0KCSRmaWxlUGF0aCA9IEdldC1SZWdpc3RyeVByb3BlcnR5ICJoa2xtOlxTb2Z0d2FyZVxNaWNyb3NvZnRcRGF0YVRyYW5zZmVyXERhdGFNYW5hZ2VtZW50R2F0ZXdheVxDb25maWd1cmF0aW9uTWFuYWdlciIgIkRpYWNtZFBhdGgiDQoJaWYgKFtzdHJpbmddOjpJc051bGxPckVtcHR5KCRmaWxlUGF0aCkpIHsNCgkJTmV3LUVycm9yICJHZXQtSW5zdGFsbGVkRmlsZVBhdGg6IENhbm5vdCBmaW5kIGluc3RhbGxlZCBGaWxlIFBhdGgiDQoJfQ0KCVRyYWNlLUxvZyAiR2F0ZXdheSBpbnN0YWxsYXRpb24gZmlsZTogJGZpbGVQYXRoIg0KCXJldHVybiAkZmlsZVBhdGgNCn0NCg0KZnVuY3Rpb24gUmVnaXN0ZXItR2F0ZXdheShbc3RyaW5nXSAkaW5zdGFuY2VLZXkpIHsNCglUcmFjZS1Mb2cgIlJlZ2lzdGVyIEFnZW50Ig0KCSRmaWxlUGF0aCA9IEdldC1JbnN0YWxsZWRGaWxlUGF0aA0KCUludm9rZS1Qcm9jZXNzICRmaWxlUGF0aCAiLWVyYSA4MDYwIg0KCUludm9rZS1Qcm9jZXNzICRmaWxlUGF0aCAiLWsgJGluc3RhbmNlS2V5Ig0KCVRyYWNlLUxvZyAiQWdlbnQgcmVnaXN0cmF0aW9uIGlzIHN1Y2Nlc3NmdWwhIg0KfQ0KDQojIEluaXQgbG9nIHNldHRpbmdzDQppZiAoIShUZXN0LVBhdGgoJGxvZ0xvYykpKSB7DQoJTmV3LUl0ZW0gLVBhdGggJGxvZ0xvYyAtSXRlbVR5cGUgRGlyZWN0b3J5IC1Gb3JjZQ0KfQ0KIlN0YXJ0IHRvIGV4Y3V0ZSBnYXRld2F5SW5zdGFsbC5wczEuIGBuIiB8IE91dC1GaWxlICRsb2dQYXRoDQpUcmFjZS1Mb2cgIkxvZyBmaWxlOiAkbG9nTG9jIg0KVHJhY2UtTG9nICJHYXRld2F5IGRvd25sb2FkIGZ3IGxpbms6ICR7Z2F0ZXdheVVyaX0iDQpUcmFjZS1Mb2cgIkdhdGV3YXkgZG93bmxvYWQgbG9jYXRpb246ICR7Z2F0ZXdheVBhdGh9Ig0KDQpHZXQtR2F0ZXdheSAkZ2F0ZXdheVVyaSAkZ2F0ZXdheVBhdGgNCkluc3RhbGwtR2F0ZXdheSAkZ2F0ZXdheVBhdGgNClJlZ2lzdGVyLUdhdGV3YXkgJGdhdGV3YXlLZXkNCg==",
                    "loadbalancerName": "[format('{0}-lb', parameters('vmssName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/loadBalancers",
                      "apiVersion": "2021-03-01",
                      "name": "[variables('loadbalancerName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Basic"
                      },
                      "properties": {
                        "backendAddressPools": [
                          {
                            "name": "[format('{0}-backendaddresspool', parameters('vmssName'))]"
                          }
                        ],
                        "frontendIPConfigurations": [
                          {
                            "name": "frontendipconfiguration",
                            "properties": {
                              "subnet": {
                                "id": "[parameters('subnetId')]"
                              }
                            }
                          }
                        ],
                        "inboundNatPools": [
                          {
                            "name": "[format('{0}-natpool', parameters('vmssName'))]",
                            "properties": {
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadbalancerName'), 'frontendipconfiguration')]"
                              },
                              "protocol": "Tcp",
                              "frontendPortRangeStart": 50000,
                              "frontendPortRangeEnd": 50099,
                              "backendPort": 3389,
                              "idleTimeoutInMinutes": 4
                            }
                          }
                        ],
                        "loadBalancingRules": [
                          {
                            "name": "proberule",
                            "properties": {
                              "loadDistribution": "Default",
                              "backendAddressPool": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadbalancerName'), format('{0}-backendaddresspool', parameters('vmssName')))]"
                              },
                              "frontendIPConfiguration": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', variables('loadbalancerName'), 'frontendipconfiguration')]"
                              },
                              "probe": {
                                "id": "[resourceId('Microsoft.Network/loadBalancers/probes', variables('loadbalancerName'), format('{0}-probe', parameters('vmssName')))]"
                              },
                              "protocol": "Tcp",
                              "frontendPort": 80,
                              "backendPort": 80,
                              "enableFloatingIP": false,
                              "idleTimeoutInMinutes": 5
                            }
                          }
                        ],
                        "probes": [
                          {
                            "name": "[format('{0}-probe', parameters('vmssName'))]",
                            "properties": {
                              "protocol": "Http",
                              "port": 80,
                              "requestPath": "/",
                              "intervalInSeconds": 5,
                              "numberOfProbes": 2
                            }
                          }
                        ]
                      }
                    },
                    {
                      "type": "Microsoft.Compute/virtualMachineScaleSets",
                      "apiVersion": "2021-07-01",
                      "name": "[parameters('vmssName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[parameters('vmssSkuName')]",
                        "tier": "[parameters('vmssSkuTier')]",
                        "capacity": "[parameters('vmssSkuCapacity')]"
                      },
                      "properties": {
                        "additionalCapabilities": {},
                        "automaticRepairsPolicy": {},
                        "doNotRunExtensionsOnOverprovisionedVMs": true,
                        "overprovision": true,
                        "platformFaultDomainCount": 1,
                        "scaleInPolicy": {
                          "rules": [
                            "Default"
                          ]
                        },
                        "singlePlacementGroup": true,
                        "upgradePolicy": {
                          "mode": "Automatic"
                        },
                        "virtualMachineProfile": {
                          "priority": "Regular",
                          "osProfile": {
                            "adminUsername": "[parameters('administratorUsername')]",
                            "adminPassword": "[parameters('administratorPassword')]",
                            "computerNamePrefix": "[take(parameters('vmssName'), 9)]",
                            "customData": "[variables('$fxv#0')]",
                            "windowsConfiguration": {
                              "enableAutomaticUpdates": true,
                              "patchSettings": {
                                "assessmentMode": "AutomaticByPlatform",
                                "enableHotpatching": false,
                                "patchMode": "AutomaticByPlatform"
                              },
                              "provisionVMAgent": true
                            }
                          },
                          "networkProfile": {
                            "networkInterfaceConfigurations": [
                              {
                                "name": "[format('{0}-nic', parameters('vmssName'))]",
                                "properties": {
                                  "primary": true,
                                  "dnsSettings": {},
                                  "enableAcceleratedNetworking": false,
                                  "enableFpga": false,
                                  "enableIPForwarding": false,
                                  "ipConfigurations": [
                                    {
                                      "name": "[format('{0}-ipconfig', parameters('vmssName'))]",
                                      "properties": {
                                        "loadBalancerBackendAddressPools": [
                                          {
                                            "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', variables('loadbalancerName'), format('{0}-backendaddresspool', parameters('vmssName')))]"
                                          }
                                        ],
                                        "loadBalancerInboundNatPools": [
                                          {
                                            "id": "[resourceId('Microsoft.Network/loadBalancers/inboundNatPools', variables('loadbalancerName'), format('{0}-natpool', parameters('vmssName')))]"
                                          }
                                        ],
                                        "primary": true,
                                        "privateIPAddressVersion": "IPv4",
                                        "subnet": {
                                          "id": "[parameters('subnetId')]"
                                        }
                                      }
                                    }
                                  ]
                                }
                              }
                            ]
                          },
                          "storageProfile": {
                            "imageReference": {
                              "offer": "WindowsServer",
                              "publisher": "MicrosoftWindowsServer",
                              "sku": "2022-datacenter-azure-edition",
                              "version": "latest"
                            },
                            "osDisk": {
                              "caching": "ReadWrite",
                              "createOption": "FromImage"
                            }
                          },
                          "extensionProfile": {
                            "extensions": [
                              {
                                "name": "[format('{0}-integrationruntime-shir', parameters('vmssName'))]",
                                "properties": {
                                  "publisher": "Microsoft.Compute",
                                  "type": "CustomScriptExtension",
                                  "typeHandlerVersion": "1.10",
                                  "autoUpgradeMinorVersion": true,
                                  "settings": {
                                    "fileUris": []
                                  },
                                  "protectedSettings": {
                                    "commandToExecute": "[format('powershell.exe -ExecutionPolicy Unrestricted -NoProfile -NonInteractive -command \"cp c:/azuredata/customdata.bin c:/azuredata/installSHIRGateway.ps1; c:/azuredata/installSHIRGateway.ps1 -gatewayKey \"{0}\"', parameters('datafactoryIntegrationRuntimeAuthKey'))]"
                                  }
                                }
                              }
                            ]
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-runtimes', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', 'sharedIntegrationServices')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "storageServices",
      "resourceGroup": "[format('{0}-storage', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.servicesSubnetId.value]"
          },
          "purviewId": {
            "value": "[parameters('purviewId')]"
          },
          "privateDnsZoneIdBlob": {
            "value": "[parameters('privateDnsZoneIdBlob')]"
          },
          "privateDnsZoneIdDfs": {
            "value": "[parameters('privateDnsZoneIdDfs')]"
          },
          "dataLandingZoneSubscriptionIds": {
            "value": "[parameters('dataLandingZoneSubscriptionIds')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "8468047651514253284"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "purviewId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdDfs": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdBlob": {
              "type": "string",
              "defaultValue": ""
            },
            "dataLandingZoneSubscriptionIds": {
              "type": "array",
              "defaultValue": []
            }
          },
          "variables": {
            "storageRawName": "[format('{0}-raw', parameters('prefix'))]",
            "storageEnrichedCuratedName": "[format('{0}-encur', parameters('prefix'))]",
            "storageWorkspaceName": "[format('{0}-work', parameters('prefix'))]",
            "domainFileSytemNames": [
              "data",
              "di001",
              "di002"
            ],
            "dataProductFileSystemNames": [
              "data",
              "dp001",
              "dp002"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "storageRaw",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageRawName')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "privateDnsZoneIdDfs": {
                    "value": "[parameters('privateDnsZoneIdDfs')]"
                  },
                  "fileSystemNames": {
                    "value": "[variables('domainFileSytemNames')]"
                  },
                  "purviewId": {
                    "value": "[parameters('purviewId')]"
                  },
                  "dataLandingZoneSubscriptionIds": {
                    "value": "[parameters('dataLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "9787394326740582353"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDfs": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dataLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storagePrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "storagePrivateEndpointNameDfs": "[format('{0}-dfs-private-endpoint', variables('storageNameCleaned'))]",
                    "purviewResourceAccessRules": {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[parameters('purviewId')]"
                    },
                    "resourceAccessRules": "[if(empty(parameters('purviewId')), variables('synapseResourceAccessrules'), union(variables('synapseResourceAccessrules'), array(variables('purviewResourceAccessRules'))))]",
                    "storageZrsRegions": [
                      "southafricanorth",
                      "australiaeast",
                      "centralindia",
                      "eastasia",
                      "japaneast",
                      "koreacentral",
                      "southeastasia",
                      "canadacentral",
                      "francecentral",
                      "germanywestcentral",
                      "northeurope",
                      "norwayeast",
                      "swedencentral",
                      "uksouth",
                      "westeurope",
                      "brazilsouth",
                      "centralus",
                      "eastus",
                      "eastus2",
                      "southcentralus",
                      "westus2",
                      "westus3"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[if(contains(variables('storageZrsRegions'), parameters('location')), 'Standard_ZRS', 'Standard_LRS')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": true,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "default",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToCool": {
                                      "daysAfterModificationGreaterThan": 90
                                    }
                                  },
                                  "snapshot": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  },
                                  "version": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameBlob'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameDfs')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameDfs')]",
                            "properties": {
                              "groupIds": [
                                "dfs"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDfs')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameDfs'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameDfs'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDfs')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameDfs'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "storageEnrichedCurated",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageEnrichedCuratedName')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "privateDnsZoneIdDfs": {
                    "value": "[parameters('privateDnsZoneIdDfs')]"
                  },
                  "fileSystemNames": {
                    "value": "[variables('domainFileSytemNames')]"
                  },
                  "purviewId": {
                    "value": "[parameters('purviewId')]"
                  },
                  "dataLandingZoneSubscriptionIds": {
                    "value": "[parameters('dataLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "9787394326740582353"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDfs": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dataLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storagePrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "storagePrivateEndpointNameDfs": "[format('{0}-dfs-private-endpoint', variables('storageNameCleaned'))]",
                    "purviewResourceAccessRules": {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[parameters('purviewId')]"
                    },
                    "resourceAccessRules": "[if(empty(parameters('purviewId')), variables('synapseResourceAccessrules'), union(variables('synapseResourceAccessrules'), array(variables('purviewResourceAccessRules'))))]",
                    "storageZrsRegions": [
                      "southafricanorth",
                      "australiaeast",
                      "centralindia",
                      "eastasia",
                      "japaneast",
                      "koreacentral",
                      "southeastasia",
                      "canadacentral",
                      "francecentral",
                      "germanywestcentral",
                      "northeurope",
                      "norwayeast",
                      "swedencentral",
                      "uksouth",
                      "westeurope",
                      "brazilsouth",
                      "centralus",
                      "eastus",
                      "eastus2",
                      "southcentralus",
                      "westus2",
                      "westus3"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[if(contains(variables('storageZrsRegions'), parameters('location')), 'Standard_ZRS', 'Standard_LRS')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": true,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "default",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToCool": {
                                      "daysAfterModificationGreaterThan": 90
                                    }
                                  },
                                  "snapshot": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  },
                                  "version": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameBlob'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameDfs')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameDfs')]",
                            "properties": {
                              "groupIds": [
                                "dfs"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDfs')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameDfs'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameDfs'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDfs')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameDfs'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "storageWorkspace",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageWorkspaceName')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "privateDnsZoneIdDfs": {
                    "value": "[parameters('privateDnsZoneIdDfs')]"
                  },
                  "fileSystemNames": {
                    "value": "[variables('dataProductFileSystemNames')]"
                  },
                  "purviewId": {
                    "value": "[parameters('purviewId')]"
                  },
                  "dataLandingZoneSubscriptionIds": {
                    "value": "[parameters('dataLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "9787394326740582353"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDfs": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSystemNames": {
                      "type": "array"
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dataLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storagePrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "storagePrivateEndpointNameDfs": "[format('{0}-dfs-private-endpoint', variables('storageNameCleaned'))]",
                    "purviewResourceAccessRules": {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[parameters('purviewId')]"
                    },
                    "resourceAccessRules": "[if(empty(parameters('purviewId')), variables('synapseResourceAccessrules'), union(variables('synapseResourceAccessrules'), array(variables('purviewResourceAccessRules'))))]",
                    "storageZrsRegions": [
                      "southafricanorth",
                      "australiaeast",
                      "centralindia",
                      "eastasia",
                      "japaneast",
                      "koreacentral",
                      "southeastasia",
                      "canadacentral",
                      "francecentral",
                      "germanywestcentral",
                      "northeurope",
                      "norwayeast",
                      "swedencentral",
                      "uksouth",
                      "westeurope",
                      "brazilsouth",
                      "centralus",
                      "eastus",
                      "eastus2",
                      "southcentralus",
                      "westus2",
                      "westus3"
                    ]
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "[if(contains(variables('storageZrsRegions'), parameters('location')), 'Standard_ZRS', 'Standard_LRS')]"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": true,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "default",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToCool": {
                                      "daysAfterModificationGreaterThan": 90
                                    }
                                  },
                                  "snapshot": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  },
                                  "version": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageFileSystems",
                        "count": "[length(parameters('fileSystemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameBlob'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storagePrivateEndpointNameDfs')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storagePrivateEndpointNameDfs')]",
                            "properties": {
                              "groupIds": [
                                "dfs"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDfs')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storagePrivateEndpointNameDfs'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storagePrivateEndpointNameDfs'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDfs')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storagePrivateEndpointNameDfs'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "storageId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                    },
                    "storageFileSystemIds": {
                      "type": "array",
                      "copy": {
                        "count": "[length(parameters('fileSystemNames'))]",
                        "input": {
                          "storageFileSystemId": "[resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', variables('storageNameCleaned'), 'default', parameters('fileSystemNames')[copyIndex()])]"
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "storageRawId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageRaw')).outputs.storageId.value]"
            },
            "storageRawFileSystemId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageRaw')).outputs.storageFileSystemIds.value[0].storageFileSystemId]"
            },
            "storageEnrichedCuratedId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageEnrichedCurated')).outputs.storageId.value]"
            },
            "storageEnrichedCuratedFileSystemId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageEnrichedCurated')).outputs.storageFileSystemIds.value[0].storageFileSystemId]"
            },
            "storageWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageWorkspace')).outputs.storageId.value]"
            },
            "storageWorkspaceFileSystemId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'storageWorkspace')).outputs.storageFileSystemIds.value[0].storageFileSystemId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-storage', variables('name')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "externalStorageServices",
      "resourceGroup": "[format('{0}-externalstorage', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "purviewId": {
            "value": "[parameters('purviewId')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.servicesSubnetId.value]"
          },
          "privateDnsZoneIdBlob": {
            "value": "[parameters('privateDnsZoneIdBlob')]"
          },
          "dataLandingZoneSubscriptionIds": {
            "value": "[parameters('dataLandingZoneSubscriptionIds')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "14720044383465191814"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "purviewId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdBlob": {
              "type": "string",
              "defaultValue": ""
            },
            "dataLandingZoneSubscriptionIds": {
              "type": "array",
              "defaultValue": []
            }
          },
          "variables": {
            "storageExternal001Name": "[format('{0}-ext001', parameters('prefix'))]",
            "fileSytemNames": [
              "data"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "storageExternal001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "storageName": {
                    "value": "[variables('storageExternal001Name')]"
                  },
                  "privateDnsZoneIdBlob": {
                    "value": "[parameters('privateDnsZoneIdBlob')]"
                  },
                  "fileSytemNames": {
                    "value": "[variables('fileSytemNames')]"
                  },
                  "purviewId": {
                    "value": "[parameters('purviewId')]"
                  },
                  "dataLandingZoneSubscriptionIds": {
                    "value": "[parameters('dataLandingZoneSubscriptionIds')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "6718577505867450742"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "storageName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdBlob": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "fileSytemNames": {
                      "type": "array",
                      "defaultValue": [
                        "data"
                      ]
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "dataLandingZoneSubscriptionIds": {
                      "type": "array",
                      "defaultValue": []
                    }
                  },
                  "variables": {
                    "copy": [
                      {
                        "name": "synapseResourceAccessrules",
                        "count": "[length(union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId)))]",
                        "input": {
                          "tenantId": "[subscription().tenantId]",
                          "resourceId": "[format('/subscriptions/{0}/resourceGroups/*/providers/Microsoft.Synapse/workspaces/*', union(parameters('dataLandingZoneSubscriptionIds'), array(subscription().subscriptionId))[copyIndex('synapseResourceAccessrules')])]"
                        }
                      }
                    ],
                    "storageNameCleaned": "[replace(parameters('storageName'), '-', '')]",
                    "storageExternalPrivateEndpointNameBlob": "[format('{0}-blob-private-endpoint', variables('storageNameCleaned'))]",
                    "purviewResourceAccessRules": {
                      "tenantId": "[subscription().tenantId]",
                      "resourceId": "[parameters('purviewId')]"
                    },
                    "resourceAccessRules": "[if(empty(parameters('purviewId')), variables('synapseResourceAccessrules'), union(variables('synapseResourceAccessrules'), array(variables('purviewResourceAccessRules'))))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Storage/storageAccounts",
                      "apiVersion": "2021-02-01",
                      "name": "[variables('storageNameCleaned')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "Standard_ZRS"
                      },
                      "kind": "StorageV2",
                      "properties": {
                        "accessTier": "Hot",
                        "allowBlobPublicAccess": false,
                        "allowSharedKeyAccess": false,
                        "encryption": {
                          "keySource": "Microsoft.Storage",
                          "requireInfrastructureEncryption": false,
                          "services": {
                            "blob": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "file": {
                              "enabled": true,
                              "keyType": "Account"
                            },
                            "queue": {
                              "enabled": true,
                              "keyType": "Service"
                            },
                            "table": {
                              "enabled": true,
                              "keyType": "Service"
                            }
                          }
                        },
                        "isHnsEnabled": false,
                        "isNfsV3Enabled": false,
                        "largeFileSharesState": "Disabled",
                        "minimumTlsVersion": "TLS1_2",
                        "networkAcls": {
                          "bypass": "Metrics",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": [],
                          "resourceAccessRules": "[variables('resourceAccessRules')]"
                        },
                        "supportsHttpsTrafficOnly": true
                      }
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/managementPolicies",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "policy": {
                          "rules": [
                            {
                              "enabled": true,
                              "name": "default",
                              "type": "Lifecycle",
                              "definition": {
                                "actions": {
                                  "baseBlob": {
                                    "tierToCool": {
                                      "daysAfterModificationGreaterThan": 90
                                    }
                                  },
                                  "snapshot": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  },
                                  "version": {
                                    "tierToCool": {
                                      "daysAfterCreationGreaterThan": 90
                                    }
                                  }
                                },
                                "filters": {
                                  "blobTypes": [
                                    "blockBlob"
                                  ],
                                  "prefixMatch": []
                                }
                              }
                            }
                          ]
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Storage/storageAccounts/blobServices",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}', variables('storageNameCleaned'), 'default')]",
                      "properties": {
                        "containerDeleteRetentionPolicy": {
                          "enabled": true,
                          "days": 7
                        },
                        "cors": {
                          "corsRules": []
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "copy": {
                        "name": "storageExternalFileSystems",
                        "count": "[length(parameters('fileSytemNames'))]"
                      },
                      "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
                      "apiVersion": "2021-02-01",
                      "name": "[format('{0}/{1}/{2}', variables('storageNameCleaned'), 'default', parameters('fileSytemNames')[copyIndex()])]",
                      "properties": {
                        "publicAccess": "None",
                        "metadata": {}
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts/blobServices', variables('storageNameCleaned'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('storageExternalPrivateEndpointNameBlob')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('storageExternalPrivateEndpointNameBlob')]",
                            "properties": {
                              "groupIds": [
                                "blob"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageNameCleaned'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdBlob')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('storageExternalPrivateEndpointNameBlob'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('storageExternalPrivateEndpointNameBlob'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdBlob')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('storageExternalPrivateEndpointNameBlob'))]"
                      ]
                    }
                  ]
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-externalstorage', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "metadataServices",
      "resourceGroup": "[format('{0}-metadata', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.servicesSubnetId.value]"
          },
          "administratorUsername": {
            "value": "[variables('administratorUsername')]"
          },
          "administratorPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "sqlserverAdminGroupName": {
            "value": ""
          },
          "sqlserverAdminGroupObjectID": {
            "value": ""
          },
          "mysqlserverAdminGroupName": {
            "value": ""
          },
          "mysqlserverAdminGroupObjectID": {
            "value": ""
          },
          "privateDnsZoneIdKeyVault": {
            "value": "[parameters('privateDnsZoneIdKeyVault')]"
          },
          "privateDnsZoneIdSqlServer": {
            "value": "[parameters('privateDnsZoneIdSqlServer')]"
          },
          "privateDnsZoneIdMySqlServer": {
            "value": "[parameters('privateDnsZoneIdMySqlServer')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "17389727953079646799"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "subnetId": {
              "type": "string"
            },
            "administratorUsername": {
              "type": "string",
              "defaultValue": "SqlServerMainUser"
            },
            "administratorPassword": {
              "type": "secureString"
            },
            "sqlserverAdminGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "sqlserverAdminGroupObjectID": {
              "type": "string",
              "defaultValue": ""
            },
            "mysqlserverAdminGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "mysqlserverAdminGroupObjectID": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdSqlServer": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdMySqlServer": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdKeyVault": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "keyVault001Name": "[format('{0}-vault001', parameters('prefix'))]",
            "keyVault002Name": "[format('{0}-vault002', parameters('prefix'))]",
            "sqlServer001Name": "[format('{0}-sqlserver001', parameters('prefix'))]",
            "mySqlServer001Name": "[format('{0}-mysqlserver001', parameters('prefix'))]",
            "mySqlServer001UsernameSecretName": "[format('{0}Username', variables('mySqlServer001Name'))]",
            "mySqlServer001PasswordSecretName": "[format('{0}Password', variables('mySqlServer001Name'))]",
            "mySqlServer001ConnectionStringSecretName": "[format('{0}ConnectionString', variables('mySqlServer001Name'))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/{1}', variables('keyVault002Name'), variables('mySqlServer001UsernameSecretName'))]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "contentType": "text/plain",
                "value": "[parameters('administratorUsername')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVault002')]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/{1}', variables('keyVault002Name'), variables('mySqlServer001PasswordSecretName'))]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "contentType": "text/plain",
                "value": "[parameters('administratorPassword')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVault002')]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2021-04-01-preview",
              "name": "[format('{0}/{1}', variables('keyVault002Name'), variables('mySqlServer001ConnectionStringSecretName'))]",
              "properties": {
                "attributes": {
                  "enabled": true
                },
                "contentType": "text/plain",
                "value": "[format('jdbc:mysql://{0}.mysql.database.azure.com:3306/{1}?useSSL=true&requireSSL=false&enabledSslProtocolSuites=TLSv1.2', variables('mySqlServer001Name'), reference(resourceId('Microsoft.Resources/deployments', 'mysqlserver001')).outputs.mySqlServerDatabaseName.value)]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'keyVault002')]",
                "[resourceId('Microsoft.Resources/deployments', 'mysqlserver001')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "keyVault001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "keyvaultName": {
                    "value": "[variables('keyVault001Name')]"
                  },
                  "privateDnsZoneIdKeyVault": {
                    "value": "[parameters('privateDnsZoneIdKeyVault')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "18239561620865877"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "keyvaultName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdKeyVault": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "keyVaultPrivateEndpointName": "[format('{0}-private-endpoint', parameters('keyvaultName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('keyvaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "accessPolicies": [],
                        "createMode": "default",
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "softDeleteRetentionInDays": 7,
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('keyVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('keyVaultPrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "vault"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdKeyVault')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('keyVaultPrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdKeyVault')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyvaultId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyvaultName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "keyVault002",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "keyvaultName": {
                    "value": "[variables('keyVault002Name')]"
                  },
                  "privateDnsZoneIdKeyVault": {
                    "value": "[parameters('privateDnsZoneIdKeyVault')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "18239561620865877"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "keyvaultName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdKeyVault": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "keyVaultPrivateEndpointName": "[format('{0}-private-endpoint', parameters('keyvaultName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.KeyVault/vaults",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('keyvaultName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "accessPolicies": [],
                        "createMode": "default",
                        "enabledForDeployment": false,
                        "enabledForDiskEncryption": false,
                        "enabledForTemplateDeployment": false,
                        "enablePurgeProtection": true,
                        "enableRbacAuthorization": true,
                        "enableSoftDelete": true,
                        "networkAcls": {
                          "bypass": "AzureServices",
                          "defaultAction": "Deny",
                          "ipRules": [],
                          "virtualNetworkRules": []
                        },
                        "sku": {
                          "family": "A",
                          "name": "standard"
                        },
                        "softDeleteRetentionInDays": 7,
                        "tenantId": "[subscription().tenantId]"
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('keyVaultPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('keyVaultPrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "vault"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdKeyVault')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('keyVaultPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('keyVaultPrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdKeyVault')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('keyVaultPrivateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "keyvaultId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.KeyVault/vaults', parameters('keyvaultName'))]"
                    },
                    "keyVaultName": {
                      "type": "string",
                      "value": "[parameters('keyvaultName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "sqlserver001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "administratorUsername": {
                    "value": "[parameters('administratorUsername')]"
                  },
                  "administratorPassword": {
                    "value": "[parameters('administratorPassword')]"
                  },
                  "sqlserverAdminGroupName": {
                    "value": "[parameters('sqlserverAdminGroupName')]"
                  },
                  "sqlserverAdminGroupObjectID": {
                    "value": "[parameters('sqlserverAdminGroupObjectID')]"
                  },
                  "sqlserverName": {
                    "value": "[variables('sqlServer001Name')]"
                  },
                  "privateDnsZoneIdSqlServer": {
                    "value": "[parameters('privateDnsZoneIdSqlServer')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "15478332187581652264"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "sqlserverName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "administratorUsername": {
                      "type": "string",
                      "defaultValue": "SqlServerMainUser"
                    },
                    "administratorPassword": {
                      "type": "secureString"
                    },
                    "sqlserverAdminGroupName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "sqlserverAdminGroupObjectID": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdSqlServer": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "sqlserverAdfMetastoreDbName": "AdfMetastoreDb",
                    "sqlserverPrivateEndpointName": "[format('{0}-private-endpoint', parameters('sqlserverName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Sql/servers",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[parameters('sqlserverName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "administratorLogin": "[parameters('administratorUsername')]",
                        "administratorLoginPassword": "[parameters('administratorPassword')]",
                        "administrators": {},
                        "minimalTlsVersion": "1.2",
                        "publicNetworkAccess": "Disabled",
                        "version": "12.0"
                      }
                    },
                    {
                      "condition": "[and(not(empty(parameters('sqlserverAdminGroupName'))), not(empty(parameters('sqlserverAdminGroupObjectID'))))]",
                      "type": "Microsoft.Sql/servers/administrators",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('sqlserverName'), 'ActiveDirectory')]",
                      "properties": {
                        "administratorType": "ActiveDirectory",
                        "login": "[parameters('sqlserverAdminGroupName')]",
                        "sid": "[parameters('sqlserverAdminGroupObjectID')]",
                        "tenantId": "[subscription().tenantId]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlserverName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Sql/servers/databases",
                      "apiVersion": "2020-11-01-preview",
                      "name": "[format('{0}/{1}', parameters('sqlserverName'), variables('sqlserverAdfMetastoreDbName'))]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "Basic",
                        "tier": "Basic",
                        "capacity": 5
                      },
                      "properties": {
                        "autoPauseDelay": -1,
                        "catalogCollation": "DATABASE_DEFAULT",
                        "collation": "SQL_Latin1_General_CP1_CI_AS",
                        "createMode": "Default",
                        "readScale": "Disabled",
                        "highAvailabilityReplicaCount": 0,
                        "licenseType": "LicenseIncluded",
                        "maxSizeBytes": 524288000,
                        "minCapacity": 1,
                        "requestedBackupStorageRedundancy": "Geo",
                        "zoneRedundant": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlserverName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('sqlserverPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('sqlserverPrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "sqlServer"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Sql/servers', parameters('sqlserverName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Sql/servers', parameters('sqlserverName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdSqlServer')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('sqlserverPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('sqlserverPrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdSqlServer')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('sqlserverPrivateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "sqlServerId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Sql/servers', parameters('sqlserverName'))]"
                    },
                    "sqlServerDatabaseName": {
                      "type": "string",
                      "value": "[variables('sqlserverAdfMetastoreDbName')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "mysqlserver001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "mysqlserverName": {
                    "value": "[variables('mySqlServer001Name')]"
                  },
                  "administratorUsername": {
                    "value": "[parameters('administratorUsername')]"
                  },
                  "administratorPassword": {
                    "value": "[parameters('administratorPassword')]"
                  },
                  "mysqlserverAdminGroupName": {
                    "value": "[parameters('mysqlserverAdminGroupName')]"
                  },
                  "mysqlserverAdminGroupObjectID": {
                    "value": "[parameters('mysqlserverAdminGroupObjectID')]"
                  },
                  "privateDnsZoneIdMySqlServer": {
                    "value": "[parameters('privateDnsZoneIdMySqlServer')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "5214411363192148920"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "mysqlserverName": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "administratorUsername": {
                      "type": "string",
                      "defaultValue": "SqlServerMainUser"
                    },
                    "administratorPassword": {
                      "type": "secureString"
                    },
                    "mysqlserverAdminGroupName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "mysqlserverAdminGroupObjectID": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdMySqlServer": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "mySqlServerDatabaseName": "HiveMetastoreDb",
                    "mysqlserverPrivateEndpointName": "[format('{0}-private-endpoint', parameters('mysqlserverName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DBforMySQL/servers",
                      "apiVersion": "2017-12-01",
                      "name": "[parameters('mysqlserverName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "GP_Gen5_2",
                        "tier": "GeneralPurpose",
                        "family": "Gen5",
                        "capacity": 2,
                        "size": "5120"
                      },
                      "properties": {
                        "administratorLogin": "[parameters('administratorUsername')]",
                        "administratorLoginPassword": "[parameters('administratorPassword')]",
                        "createMode": "Default",
                        "infrastructureEncryption": "Disabled",
                        "minimalTlsVersion": "TLS1_2",
                        "publicNetworkAccess": "Disabled",
                        "sslEnforcement": "Enabled",
                        "storageProfile": {
                          "backupRetentionDays": 7,
                          "geoRedundantBackup": "Enabled",
                          "storageAutogrow": "Enabled",
                          "storageMB": 5120
                        },
                        "version": "5.7"
                      }
                    },
                    {
                      "type": "Microsoft.DBforMySQL/servers/configurations",
                      "apiVersion": "2017-12-01",
                      "name": "[format('{0}/{1}', parameters('mysqlserverName'), 'lower_case_table_names')]",
                      "properties": {
                        "value": "2",
                        "source": "user-override"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DBforMySQL/servers', parameters('mysqlserverName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DBforMySQL/servers/databases",
                      "apiVersion": "2017-12-01",
                      "name": "[format('{0}/{1}', parameters('mysqlserverName'), variables('mySqlServerDatabaseName'))]",
                      "properties": {
                        "charset": "latin1",
                        "collation": "latin1_swedish_ci"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DBforMySQL/servers', parameters('mysqlserverName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('mysqlserverAdminGroupName'))), not(empty(parameters('mysqlserverAdminGroupObjectID'))))]",
                      "type": "Microsoft.DBforMySQL/servers/administrators",
                      "apiVersion": "2017-12-01",
                      "name": "[format('{0}/{1}', parameters('mysqlserverName'), 'activeDirectory')]",
                      "properties": {
                        "administratorType": "ActiveDirectory",
                        "login": "[parameters('mysqlserverAdminGroupName')]",
                        "sid": "[parameters('mysqlserverAdminGroupObjectID')]",
                        "tenantId": "[subscription().tenantId]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DBforMySQL/servers', parameters('mysqlserverName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('mysqlserverPrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('mysqlserverPrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "mysqlServer"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.DBforMySQL/servers', parameters('mysqlserverName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DBforMySQL/servers', parameters('mysqlserverName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdMySqlServer')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('mysqlserverPrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('mysqlserverPrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdMySqlServer')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('mysqlserverPrivateEndpointName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "mySqlServerId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DBforMySQL/servers', parameters('mysqlserverName'))]"
                    },
                    "mySqlServerDatabaseName": {
                      "type": "string",
                      "value": "[variables('mySqlServerDatabaseName')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "keyVault001Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'keyVault001')).outputs.keyvaultId.value]"
            },
            "sqlServer001Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sqlserver001')).outputs.sqlServerId.value]"
            },
            "sqlServer001DatabaseName": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'sqlserver001')).outputs.sqlServerDatabaseName.value]"
            },
            "mySqlServer001Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'mysqlserver001')).outputs.mySqlServerId.value]"
            },
            "mySqlServer001UsernameSecretName": {
              "type": "string",
              "value": "[variables('mySqlServer001UsernameSecretName')]"
            },
            "mySqlServer001PasswordSecretName": {
              "type": "string",
              "value": "[variables('mySqlServer001PasswordSecretName')]"
            },
            "mySqlServer001ConnectionStringSecretName": {
              "type": "string",
              "value": "[variables('mySqlServer001ConnectionStringSecretName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-metadata', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "sharedIntegrationServices",
      "resourceGroup": "[format('{0}-shared-integration', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.servicesSubnetId.value]"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.vnetId.value]"
          },
          "databricksIntegration001PrivateSubnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.databricksIntegrationPrivateSubnetName.value]"
          },
          "databricksIntegration001PublicSubnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.databricksIntegrationPublicSubnetName.value]"
          },
          "storageRawId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-storage', variables('name'))), 'Microsoft.Resources/deployments', 'storageServices')).outputs.storageRawId.value]"
          },
          "storageAccountRawFileSystemId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-storage', variables('name'))), 'Microsoft.Resources/deployments', 'storageServices')).outputs.storageRawFileSystemId.value]"
          },
          "storageEnrichedCuratedId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-storage', variables('name'))), 'Microsoft.Resources/deployments', 'storageServices')).outputs.storageEnrichedCuratedId.value]"
          },
          "storageAccountEnrichedCuratedFileSystemId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-storage', variables('name'))), 'Microsoft.Resources/deployments', 'storageServices')).outputs.storageEnrichedCuratedFileSystemId.value]"
          },
          "keyVault001Id": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.keyVault001Id.value]"
          },
          "sqlServer001Id": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.sqlServer001Id.value]"
          },
          "sqlDatabase001Name": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.sqlServer001DatabaseName.value]"
          },
          "purviewId": {
            "value": "[parameters('purviewId')]"
          },
          "purviewManagedStorageId": {
            "value": "[parameters('purviewManagedStorageId')]"
          },
          "purviewManagedEventHubId": {
            "value": "[parameters('purviewManagedEventHubId')]"
          },
          "privateDnsZoneIdDataFactory": {
            "value": "[parameters('privateDnsZoneIdDataFactory')]"
          },
          "privateDnsZoneIdDataFactoryPortal": {
            "value": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
          },
          "privateDnsZoneIdEventhubNamespace": {
            "value": "[parameters('privateDnsZoneIdEventhubNamespace')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "16998795706118530227"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "storageAccountRawFileSystemId": {
              "type": "string"
            },
            "storageAccountEnrichedCuratedFileSystemId": {
              "type": "string"
            },
            "vnetId": {
              "type": "string"
            },
            "databricksIntegration001PrivateSubnetName": {
              "type": "string"
            },
            "databricksIntegration001PublicSubnetName": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "purviewId": {
              "type": "string",
              "defaultValue": ""
            },
            "purviewManagedStorageId": {
              "type": "string",
              "defaultValue": ""
            },
            "purviewManagedEventHubId": {
              "type": "string",
              "defaultValue": ""
            },
            "storageRawId": {
              "type": "string"
            },
            "storageEnrichedCuratedId": {
              "type": "string"
            },
            "keyVault001Id": {
              "type": "string"
            },
            "sqlServer001Id": {
              "type": "string"
            },
            "sqlDatabase001Name": {
              "type": "string"
            },
            "privateDnsZoneIdDataFactory": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdDataFactoryPortal": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdEventhubNamespace": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "databricksIntegration001Name": "[format('{0}-integration-databricks001', parameters('prefix'))]",
            "eventhubNamespaceIntegration001Name": "[format('{0}-integration-eventhub001', parameters('prefix'))]",
            "datafactoryIntegration001Name": "[format('{0}-integration-datafactory001', parameters('prefix'))]",
            "storageAccountRawSubscriptionId": "[if(greaterOrEquals(length(split(parameters('storageAccountRawFileSystemId'), '/')), 13), split(parameters('storageAccountRawFileSystemId'), '/')[2], subscription().subscriptionId)]",
            "storageAccountRawResourceGroupName": "[if(greaterOrEquals(length(split(parameters('storageAccountRawFileSystemId'), '/')), 13), split(parameters('storageAccountRawFileSystemId'), '/')[4], resourceGroup().name)]",
            "storageAccountEnrichedCuratedSubscriptionId": "[if(greaterOrEquals(length(split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')), 13), split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')[2], subscription().subscriptionId)]",
            "storageAccountEnrichedCuratedResourceGroupName": "[if(greaterOrEquals(length(split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')), 13), split(parameters('storageAccountEnrichedCuratedFileSystemId'), '/')[4], resourceGroup().name)]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "databricksIntegration001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "databricksName": {
                    "value": "[variables('databricksIntegration001Name')]"
                  },
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  },
                  "privateSubnetName": {
                    "value": "[parameters('databricksIntegration001PrivateSubnetName')]"
                  },
                  "publicSubnetName": {
                    "value": "[parameters('databricksIntegration001PublicSubnetName')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "6231675477160043719"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "databricksName": {
                      "type": "string"
                    },
                    "vnetId": {
                      "type": "string"
                    },
                    "privateSubnetName": {
                      "type": "string"
                    },
                    "publicSubnetName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Databricks/workspaces",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('databricksName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "premium"
                      },
                      "properties": {
                        "managedResourceGroupId": "[format('{0}/resourceGroups/{1}-rg', subscription().id, parameters('databricksName'))]",
                        "parameters": {
                          "customVirtualNetworkId": {
                            "value": "[parameters('vnetId')]"
                          },
                          "customPrivateSubnetName": {
                            "value": "[parameters('privateSubnetName')]"
                          },
                          "customPublicSubnetName": {
                            "value": "[parameters('publicSubnetName')]"
                          },
                          "enableNoPublicIp": {
                            "value": true
                          },
                          "prepareEncryption": {
                            "value": true
                          },
                          "requireInfrastructureEncryption": {
                            "value": false
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "databricksId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Databricks/workspaces', parameters('databricksName'))]"
                    },
                    "databricksWorkspaceUrl": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('databricksName'))).workspaceUrl]"
                    },
                    "databricksApiUrl": {
                      "type": "string",
                      "value": "[format('https://{0}.azuredatabricks.net', parameters('location'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "eventhubNamespaceIntegration001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "eventhubnamespaceName": {
                    "value": "[variables('eventhubNamespaceIntegration001Name')]"
                  },
                  "privateDnsZoneIdEventhubNamespace": {
                    "value": "[parameters('privateDnsZoneIdEventhubNamespace')]"
                  },
                  "eventhubnamespaceMinThroughput": {
                    "value": 1
                  },
                  "eventhubnamespaceMaxThroughput": {
                    "value": 1
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "6343378915617626763"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "eventhubnamespaceName": {
                      "type": "string"
                    },
                    "eventhubnamespaceMinThroughput": {
                      "type": "int",
                      "defaultValue": 1,
                      "maxValue": 20,
                      "minValue": 1
                    },
                    "eventhubnamespaceMaxThroughput": {
                      "type": "int",
                      "defaultValue": 2,
                      "maxValue": 20,
                      "minValue": 1
                    },
                    "privateDnsZoneIdEventhubNamespace": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "eventhubNamespacePrivateEndpointName": "[format('{0}-private-endpoint', parameters('eventhubnamespaceName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.EventHub/namespaces",
                      "apiVersion": "2021-01-01-preview",
                      "name": "[parameters('eventhubnamespaceName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "sku": {
                        "name": "Standard",
                        "tier": "Standard",
                        "capacity": "[parameters('eventhubnamespaceMinThroughput')]"
                      },
                      "properties": {
                        "isAutoInflateEnabled": true,
                        "kafkaEnabled": true,
                        "maximumThroughputUnits": "[parameters('eventhubnamespaceMaxThroughput')]",
                        "zoneRedundant": true
                      }
                    },
                    {
                      "type": "Microsoft.EventHub/namespaces/networkRuleSets",
                      "apiVersion": "2021-06-01-preview",
                      "name": "[format('{0}/{1}', parameters('eventhubnamespaceName'), 'default')]",
                      "properties": {
                        "defaultAction": "Deny",
                        "ipRules": [],
                        "virtualNetworkRules": [],
                        "publicNetworkAccess": "Disabled",
                        "trustedServiceAccessEnabled": false
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventhubnamespaceName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('eventhubNamespacePrivateEndpointName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('eventhubNamespacePrivateEndpointName')]",
                            "properties": {
                              "groupIds": [
                                "namespace"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.EventHub/namespaces', parameters('eventhubnamespaceName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces', parameters('eventhubnamespaceName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdEventhubNamespace')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('eventhubNamespacePrivateEndpointName'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('eventhubNamespacePrivateEndpointName'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdEventhubNamespace')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('eventhubNamespacePrivateEndpointName'))]"
                      ]
                    }
                  ]
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "datafactoryIntegration001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "datafactoryName": {
                    "value": "[variables('datafactoryIntegration001Name')]"
                  },
                  "privateDnsZoneIdDataFactory": {
                    "value": "[parameters('privateDnsZoneIdDataFactory')]"
                  },
                  "privateDnsZoneIdDataFactoryPortal": {
                    "value": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
                  },
                  "purviewId": {
                    "value": "[parameters('purviewId')]"
                  },
                  "purviewManagedStorageId": {
                    "value": "[parameters('purviewManagedStorageId')]"
                  },
                  "purviewManagedEventHubId": {
                    "value": "[parameters('purviewManagedEventHubId')]"
                  },
                  "storageRawId": {
                    "value": "[parameters('storageRawId')]"
                  },
                  "storageEnrichedCuratedId": {
                    "value": "[parameters('storageEnrichedCuratedId')]"
                  },
                  "databricks001Id": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'databricksIntegration001')).outputs.databricksId.value]"
                  },
                  "databricks001WorkspaceUrl": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'databricksIntegration001')).outputs.databricksWorkspaceUrl.value]"
                  },
                  "keyVault001Id": {
                    "value": "[parameters('keyVault001Id')]"
                  },
                  "sqlServer001Id": {
                    "value": "[parameters('sqlServer001Id')]"
                  },
                  "sqlDatabase001Name": {
                    "value": "[parameters('sqlDatabase001Name')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "15679974719602816675"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "datafactoryName": {
                      "type": "string"
                    },
                    "privateDnsZoneIdDataFactory": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdDataFactoryPortal": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "purviewManagedStorageId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "purviewManagedEventHubId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "storageRawId": {
                      "type": "string"
                    },
                    "storageEnrichedCuratedId": {
                      "type": "string"
                    },
                    "databricks001Id": {
                      "type": "string"
                    },
                    "databricks001WorkspaceUrl": {
                      "type": "string"
                    },
                    "keyVault001Id": {
                      "type": "string"
                    },
                    "sqlServer001Id": {
                      "type": "string"
                    },
                    "sqlDatabase001Name": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "storageRawName": "[if(greaterOrEquals(length(split(parameters('storageRawId'), '/')), 9), last(split(parameters('storageRawId'), '/')), 'incorrectSegmentLength')]",
                    "storageEnrichedCuratedName": "[if(greaterOrEquals(length(split(parameters('storageEnrichedCuratedId'), '/')), 9), last(split(parameters('storageEnrichedCuratedId'), '/')), 'incorrectSegmentLength')]",
                    "databricks001Name": "[if(greaterOrEquals(length(split(parameters('databricks001Id'), '/')), 9), last(split(parameters('databricks001Id'), '/')), 'incorrectSegmentLength')]",
                    "keyVault001Name": "[if(greaterOrEquals(length(split(parameters('keyVault001Id'), '/')), 9), last(split(parameters('keyVault001Id'), '/')), 'incorrectSegmentLength')]",
                    "sqlServer001Name": "[if(greaterOrEquals(length(split(parameters('sqlServer001Id'), '/')), 9), last(split(parameters('sqlServer001Id'), '/')), 'incorrectSegmentLength')]",
                    "datafactoryDefaultManagedVnetIntegrationRuntimeName": "AutoResolveIntegrationRuntime",
                    "datafactoryPrivateEndpointNameDatafactory": "[format('{0}-datafactory-private-endpoint', parameters('datafactoryName'))]",
                    "datafactoryPrivateEndpointNamePortal": "[format('{0}-portal-private-endpoint', parameters('datafactoryName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.DataFactory/factories",
                      "apiVersion": "2018-06-01",
                      "name": "[parameters('datafactoryName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "globalParameters": {},
                        "publicNetworkAccess": "Disabled",
                        "purviewConfiguration": {
                          "purviewResourceId": "[parameters('purviewId')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('datafactoryPrivateEndpointNameDatafactory')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('datafactoryPrivateEndpointNameDatafactory')]",
                            "properties": {
                              "groupIds": [
                                "dataFactory"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDataFactory')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('datafactoryPrivateEndpointNameDatafactory'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('datafactoryPrivateEndpointNameDatafactory'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDataFactory')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('datafactoryPrivateEndpointNameDatafactory'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('datafactoryPrivateEndpointNamePortal')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('datafactoryPrivateEndpointNamePortal')]",
                            "properties": {
                              "groupIds": [
                                "portal"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdDataFactoryPortal')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('datafactoryPrivateEndpointNamePortal'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('datafactoryPrivateEndpointNamePortal'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdDataFactoryPortal')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('datafactoryPrivateEndpointNamePortal'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), 'default')]",
                      "properties": {},
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/integrationRuntimes",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                      "properties": {
                        "type": "Managed",
                        "managedVirtualNetwork": {
                          "type": "ManagedVirtualNetworkReference",
                          "referenceName": "default"
                        },
                        "typeProperties": {
                          "computeProperties": {
                            "location": "AutoResolve"
                          }
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('purviewId')))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', 'Purview')]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "account",
                        "privateLinkResourceId": "[parameters('purviewId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('purviewManagedStorageId')))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', 'Purview_blob')]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "blob",
                        "privateLinkResourceId": "[parameters('purviewManagedStorageId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('purviewManagedStorageId')))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', 'Purview_queue')]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "queue",
                        "privateLinkResourceId": "[parameters('purviewManagedStorageId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('purviewManagedEventHubId')))]",
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', 'Purview_namespace')]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "namespace",
                        "privateLinkResourceId": "[parameters('purviewManagedEventHubId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', replace(variables('keyVault001Name'), '-', ''))]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "vault",
                        "privateLinkResourceId": "[parameters('keyVault001Id')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), replace(variables('keyVault001Name'), '-', ''))]",
                      "properties": {
                        "type": "AzureKeyVault",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Key Vault for storing secrets",
                        "parameters": {},
                        "typeProperties": {
                          "baseUrl": "[format('https://{0}{1}/', variables('keyVault001Name'), environment().suffixes.keyvaultDns)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints', parameters('datafactoryName'), 'default', replace(variables('keyVault001Name'), '-', ''))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', replace(variables('sqlServer001Name'), '-', ''))]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "sqlServer",
                        "privateLinkResourceId": "[parameters('sqlServer001Id')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), format('{0}{1}', replace(variables('sqlServer001Name'), '-', ''), replace(parameters('sqlDatabase001Name'), '-', '')))]",
                      "properties": {
                        "type": "AzureSqlDatabase",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Sql Database for storing metadata",
                        "parameters": {},
                        "typeProperties": {
                          "connectionString": "[format('Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source={0}{1};Initial Catalog={2}', variables('sqlServer001Name'), environment().suffixes.sqlServerHostname, parameters('sqlDatabase001Name'))]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints', parameters('datafactoryName'), 'default', replace(variables('sqlServer001Name'), '-', ''))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', variables('storageRawName'))]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "dfs",
                        "privateLinkResourceId": "[parameters('storageRawId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('storageRawName'))]",
                      "properties": {
                        "type": "AzureBlobFS",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Storage Account for raw data",
                        "parameters": {},
                        "typeProperties": {
                          "url": "[format('https://{0}.dfs.{1}', variables('storageRawName'), environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints', parameters('datafactoryName'), 'default', variables('storageRawName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}/{2}', parameters('datafactoryName'), 'default', variables('storageEnrichedCuratedName'))]",
                      "properties": {
                        "fqdns": [],
                        "groupId": "dfs",
                        "privateLinkResourceId": "[parameters('storageEnrichedCuratedId')]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks', parameters('datafactoryName'), 'default')]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), variables('storageEnrichedCuratedName'))]",
                      "properties": {
                        "type": "AzureBlobFS",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Storage Account for raw data",
                        "parameters": {},
                        "typeProperties": {
                          "url": "[format('https://{0}.dfs.{1}', variables('storageEnrichedCuratedName'), environment().suffixes.storage)]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/managedVirtualNetworks/managedPrivateEndpoints', parameters('datafactoryName'), 'default', variables('storageEnrichedCuratedName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.DataFactory/factories/linkedservices",
                      "apiVersion": "2018-06-01",
                      "name": "[format('{0}/{1}', parameters('datafactoryName'), replace(variables('databricks001Name'), '-', ''))]",
                      "properties": {
                        "type": "AzureDatabricks",
                        "annotations": [],
                        "connectVia": {
                          "type": "IntegrationRuntimeReference",
                          "referenceName": "[variables('datafactoryDefaultManagedVnetIntegrationRuntimeName')]",
                          "parameters": {}
                        },
                        "description": "Azure Databricks Compute for Data Engineering",
                        "parameters": {
                          "DatabricksClusterType": {
                            "type": "String",
                            "defaultValue": "Standard_DS3_v2"
                          },
                          "DatabricksAutoscale": {
                            "type": "String",
                            "defaultValue": "1:15"
                          },
                          "DatabrickClusterVersion": {
                            "type": "String",
                            "defaultValue": "7.3.x-scala2.12"
                          }
                        },
                        "typeProperties": {
                          "authentication": "MSI",
                          "domain": "[format('https://{0}', parameters('databricks001WorkspaceUrl'))]",
                          "newClusterCustomTags": {
                            "costCenter": "ABCDE-12345"
                          },
                          "newClusterDriverNodeType": "@linkedService().DatabricksClusterType",
                          "newClusterNodeType": "@linkedService().DatabricksClusterType",
                          "newClusterNumOfWorker": "@linkedService().DatabricksAutoscale",
                          "newClusterSparkEnvVars": {
                            "PYSPARK_PYTHON": "/databricks/python3/bin/python3"
                          },
                          "newClusterVersion": "@linkedService().DatabrickClusterVersion",
                          "workspaceResourceId": "[parameters('databricks001Id')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]",
                        "[resourceId('Microsoft.DataFactory/factories/integrationRuntimes', parameters('datafactoryName'), variables('datafactoryDefaultManagedVnetIntegrationRuntimeName'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "datafactoryId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.DataFactory/factories', parameters('datafactoryName'))]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'databricksIntegration001')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "datafactory001StorageRawRoleAssignment",
              "subscriptionId": "[variables('storageAccountRawSubscriptionId')]",
              "resourceGroup": "[variables('storageAccountRawResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "datafactoryId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datafactoryIntegration001')).outputs.datafactoryId.value]"
                  },
                  "storageAccountFileSystemId": {
                    "value": "[parameters('storageAccountRawFileSystemId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "6091338335510761707"
                    }
                  },
                  "parameters": {
                    "storageAccountFileSystemId": {
                      "type": "string"
                    },
                    "datafactoryId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "storageAccountFileSystemName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), last(split(parameters('storageAccountFileSystemId'), '/')), 'incorrectSegmentLength')]",
                    "storageAccountName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), split(parameters('storageAccountFileSystemId'), '/')[8], 'incorrectSegmentLength')]",
                    "datafactorySubscriptionId": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[2], subscription().subscriptionId)]",
                    "datafactoryResourceGroupName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[4], resourceGroup().name)]",
                    "datafactoryName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), last(split(parameters('datafactoryId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2])]",
                      "name": "[guid(uniqueString(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2]), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'datafactoryIntegration001')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "datafactory001StorageEnrichedCuratedRoleAssignment",
              "subscriptionId": "[variables('storageAccountEnrichedCuratedSubscriptionId')]",
              "resourceGroup": "[variables('storageAccountEnrichedCuratedResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "datafactoryId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datafactoryIntegration001')).outputs.datafactoryId.value]"
                  },
                  "storageAccountFileSystemId": {
                    "value": "[parameters('storageAccountEnrichedCuratedFileSystemId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "6091338335510761707"
                    }
                  },
                  "parameters": {
                    "storageAccountFileSystemId": {
                      "type": "string"
                    },
                    "datafactoryId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "storageAccountFileSystemName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), last(split(parameters('storageAccountFileSystemId'), '/')), 'incorrectSegmentLength')]",
                    "storageAccountName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), split(parameters('storageAccountFileSystemId'), '/')[8], 'incorrectSegmentLength')]",
                    "datafactorySubscriptionId": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[2], subscription().subscriptionId)]",
                    "datafactoryResourceGroupName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[4], resourceGroup().name)]",
                    "datafactoryName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), last(split(parameters('datafactoryId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2])]",
                      "name": "[guid(uniqueString(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2]), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'datafactoryIntegration001')]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "datafactory001DatabricksRoleAssignment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "datafactoryId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datafactoryIntegration001')).outputs.datafactoryId.value]"
                  },
                  "databricksId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'databricksIntegration001')).outputs.databricksId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "5499124937810468209"
                    }
                  },
                  "parameters": {
                    "databricksId": {
                      "type": "string"
                    },
                    "datafactoryId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "databricksName": "[if(greaterOrEquals(length(split(parameters('databricksId'), '/')), 9), last(split(parameters('databricksId'), '/')), 'incorrectSegmentLength')]",
                    "datafactorySubscriptionId": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[2], subscription().subscriptionId)]",
                    "datafactoryResourceGroupName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), split(parameters('datafactoryId'), '/')[4], resourceGroup().name)]",
                    "datafactoryName": "[if(greaterOrEquals(length(split(parameters('datafactoryId'), '/')), 9), last(split(parameters('datafactoryId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Databricks/workspaces/{0}', variables('databricksName'))]",
                      "name": "[guid(uniqueString(resourceId('Microsoft.Databricks/workspaces', variables('databricksName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName'))))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('datafactorySubscriptionId'), variables('datafactoryResourceGroupName')), 'Microsoft.DataFactory/factories', variables('datafactoryName')), '2018-06-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'databricksIntegration001')]",
                "[resourceId('Microsoft.Resources/deployments', 'datafactoryIntegration001')]"
              ]
            }
          ],
          "outputs": {
            "datafactoryIntegration001Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'datafactoryIntegration001')).outputs.datafactoryId.value]"
            },
            "databricksIntegration001Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'databricksIntegration001')).outputs.databricksId.value]"
            },
            "databricksIntegration001ApiUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'databricksIntegration001')).outputs.databricksApiUrl.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-shared-integration', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-storage', variables('name'))), 'Microsoft.Resources/deployments', 'storageServices')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "sharedProductServices",
      "resourceGroup": "[format('{0}-shared-product', variables('name'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "prefix": {
            "value": "[variables('name')]"
          },
          "tags": {
            "value": "[variables('tagsJoined')]"
          },
          "subnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.servicesSubnetId.value]"
          },
          "vnetId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.vnetId.value]"
          },
          "databricksProduct001PrivateSubnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.databricksProductPrivateSubnetName.value]"
          },
          "databricksProduct001PublicSubnetName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.databricksProductPublicSubnetName.value]"
          },
          "administratorUsername": {
            "value": "[variables('administratorUsername')]"
          },
          "administratorPassword": {
            "value": "[parameters('administratorPassword')]"
          },
          "synapseProduct001DefaultStorageAccountFileSystemId": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-storage', variables('name'))), 'Microsoft.Resources/deployments', 'storageServices')).outputs.storageWorkspaceFileSystemId.value]"
          },
          "synapseSqlAdminGroupName": {
            "value": ""
          },
          "synapseSqlAdminGroupObjectID": {
            "value": ""
          },
          "synapseProduct001ComputeSubnetId": {
            "value": ""
          },
          "purviewId": {
            "value": "[parameters('purviewId')]"
          },
          "privateDnsZoneIdSynapseDev": {
            "value": "[parameters('privateDnsZoneIdSynapseDev')]"
          },
          "privateDnsZoneIdSynapseSql": {
            "value": "[parameters('privateDnsZoneIdSynapseSql')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "15538750105602087048"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "prefix": {
              "type": "string"
            },
            "tags": {
              "type": "object"
            },
            "administratorUsername": {
              "type": "string",
              "defaultValue": "SqlServerMainUser"
            },
            "administratorPassword": {
              "type": "secureString"
            },
            "synapseSqlAdminGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "synapseSqlAdminGroupObjectID": {
              "type": "string",
              "defaultValue": ""
            },
            "synapseProduct001DefaultStorageAccountFileSystemId": {
              "type": "string"
            },
            "synapseProduct001ComputeSubnetId": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdSynapseSql": {
              "type": "string",
              "defaultValue": ""
            },
            "privateDnsZoneIdSynapseDev": {
              "type": "string",
              "defaultValue": ""
            },
            "vnetId": {
              "type": "string"
            },
            "databricksProduct001PrivateSubnetName": {
              "type": "string"
            },
            "databricksProduct001PublicSubnetName": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "purviewId": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "synapseProduct001DefaultStorageAccountSubscriptionId": "[if(greaterOrEquals(length(split(parameters('synapseProduct001DefaultStorageAccountFileSystemId'), '/')), 13), split(parameters('synapseProduct001DefaultStorageAccountFileSystemId'), '/')[2], subscription().subscriptionId)]",
            "synapseProduct001DefaultStorageAccountResourceGroupName": "[if(greaterOrEquals(length(split(parameters('synapseProduct001DefaultStorageAccountFileSystemId'), '/')), 13), split(parameters('synapseProduct001DefaultStorageAccountFileSystemId'), '/')[4], resourceGroup().name)]",
            "databricksProduct001Name": "[format('{0}-product-databricks001', parameters('prefix'))]",
            "synapseProduct001Name": "[format('{0}-product-synapse001', parameters('prefix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "databricksProduct001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "databricksName": {
                    "value": "[variables('databricksProduct001Name')]"
                  },
                  "privateSubnetName": {
                    "value": "[parameters('databricksProduct001PrivateSubnetName')]"
                  },
                  "publicSubnetName": {
                    "value": "[parameters('databricksProduct001PublicSubnetName')]"
                  },
                  "vnetId": {
                    "value": "[parameters('vnetId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "6231675477160043719"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "databricksName": {
                      "type": "string"
                    },
                    "vnetId": {
                      "type": "string"
                    },
                    "privateSubnetName": {
                      "type": "string"
                    },
                    "publicSubnetName": {
                      "type": "string"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Databricks/workspaces",
                      "apiVersion": "2021-04-01-preview",
                      "name": "[parameters('databricksName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "sku": {
                        "name": "premium"
                      },
                      "properties": {
                        "managedResourceGroupId": "[format('{0}/resourceGroups/{1}-rg', subscription().id, parameters('databricksName'))]",
                        "parameters": {
                          "customVirtualNetworkId": {
                            "value": "[parameters('vnetId')]"
                          },
                          "customPrivateSubnetName": {
                            "value": "[parameters('privateSubnetName')]"
                          },
                          "customPublicSubnetName": {
                            "value": "[parameters('publicSubnetName')]"
                          },
                          "enableNoPublicIp": {
                            "value": true
                          },
                          "prepareEncryption": {
                            "value": true
                          },
                          "requireInfrastructureEncryption": {
                            "value": false
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "databricksId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Databricks/workspaces', parameters('databricksName'))]"
                    },
                    "databricksWorkspaceUrl": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Databricks/workspaces', parameters('databricksName'))).workspaceUrl]"
                    },
                    "databricksApiUrl": {
                      "type": "string",
                      "value": "[format('https://{0}.azuredatabricks.net', parameters('location'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "synapseProduct001",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  },
                  "subnetId": {
                    "value": "[parameters('subnetId')]"
                  },
                  "synapseName": {
                    "value": "[variables('synapseProduct001Name')]"
                  },
                  "administratorUsername": {
                    "value": "[parameters('administratorUsername')]"
                  },
                  "administratorPassword": {
                    "value": "[parameters('administratorPassword')]"
                  },
                  "synapseSqlAdminGroupName": {
                    "value": "[parameters('synapseSqlAdminGroupName')]"
                  },
                  "synapseSqlAdminGroupObjectID": {
                    "value": "[parameters('synapseSqlAdminGroupObjectID')]"
                  },
                  "synapseDefaultStorageAccountFileSystemId": {
                    "value": "[parameters('synapseProduct001DefaultStorageAccountFileSystemId')]"
                  },
                  "synapseComputeSubnetId": {
                    "value": "[parameters('synapseProduct001ComputeSubnetId')]"
                  },
                  "privateDnsZoneIdSynapseDev": {
                    "value": "[parameters('privateDnsZoneIdSynapseDev')]"
                  },
                  "privateDnsZoneIdSynapseSql": {
                    "value": "[parameters('privateDnsZoneIdSynapseSql')]"
                  },
                  "purviewId": {
                    "value": "[parameters('purviewId')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "5002466581880264839"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    },
                    "subnetId": {
                      "type": "string"
                    },
                    "synapseName": {
                      "type": "string"
                    },
                    "administratorUsername": {
                      "type": "string",
                      "defaultValue": "SqlServerMainUser"
                    },
                    "administratorPassword": {
                      "type": "secureString"
                    },
                    "synapseSqlAdminGroupName": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "synapseSqlAdminGroupObjectID": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "synapseDefaultStorageAccountFileSystemId": {
                      "type": "string"
                    },
                    "synapseComputeSubnetId": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdSynapseSql": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "privateDnsZoneIdSynapseDev": {
                      "type": "string",
                      "defaultValue": ""
                    },
                    "purviewId": {
                      "type": "string",
                      "defaultValue": ""
                    }
                  },
                  "variables": {
                    "synapseDefaultStorageAccountFileSystemName": "[if(greaterOrEquals(length(split(parameters('synapseDefaultStorageAccountFileSystemId'), '/')), 13), last(split(parameters('synapseDefaultStorageAccountFileSystemId'), '/')), 'incorrectSegmentLength')]",
                    "synapseDefaultStorageAccountName": "[if(greaterOrEquals(length(split(parameters('synapseDefaultStorageAccountFileSystemId'), '/')), 13), split(parameters('synapseDefaultStorageAccountFileSystemId'), '/')[8], 'incorrectSegmentLength')]",
                    "synapsePrivateEndpointNameSql": "[format('{0}-sql-private-endpoint', parameters('synapseName'))]",
                    "synapsePrivateEndpointNameSqlOnDemand": "[format('{0}-sqlondemand-private-endpoint', parameters('synapseName'))]",
                    "synapsePrivateEndpointNameDev": "[format('{0}-dev-private-endpoint', parameters('synapseName'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Synapse/workspaces",
                      "apiVersion": "2021-03-01",
                      "name": "[parameters('synapseName')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "identity": {
                        "type": "SystemAssigned"
                      },
                      "properties": {
                        "defaultDataLakeStorage": {
                          "accountUrl": "[format('https://{0}.dfs.{1}', variables('synapseDefaultStorageAccountName'), environment().suffixes.storage)]",
                          "filesystem": "[variables('synapseDefaultStorageAccountFileSystemName')]"
                        },
                        "managedResourceGroupName": "[parameters('synapseName')]",
                        "managedVirtualNetwork": "default",
                        "managedVirtualNetworkSettings": {
                          "allowedAadTenantIdsForLinking": [],
                          "linkedAccessCheckOnTargetResource": true,
                          "preventDataExfiltration": true
                        },
                        "publicNetworkAccess": "Disabled",
                        "purviewConfiguration": {
                          "purviewResourceId": "[parameters('purviewId')]"
                        },
                        "sqlAdministratorLogin": "[parameters('administratorUsername')]",
                        "sqlAdministratorLoginPassword": "[parameters('administratorPassword')]",
                        "virtualNetworkProfile": {
                          "computeSubnetId": "[parameters('synapseComputeSubnetId')]"
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Synapse/workspaces/managedIdentitySqlControlSettings",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('synapseName'), 'default')]",
                      "properties": {
                        "grantSqlControlToManagedIdentity": {
                          "desiredState": "Enabled"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "condition": "[and(not(empty(parameters('synapseSqlAdminGroupName'))), not(empty(parameters('synapseSqlAdminGroupObjectID'))))]",
                      "type": "Microsoft.Synapse/workspaces/administrators",
                      "apiVersion": "2021-03-01",
                      "name": "[format('{0}/{1}', parameters('synapseName'), 'activeDirectory')]",
                      "properties": {
                        "administratorType": "ActiveDirectory",
                        "login": "[parameters('synapseSqlAdminGroupName')]",
                        "sid": "[parameters('synapseSqlAdminGroupObjectID')]",
                        "tenantId": "[subscription().tenantId]"
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('synapsePrivateEndpointNameSql')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('synapsePrivateEndpointNameSql')]",
                            "properties": {
                              "groupIds": [
                                "Sql"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdSynapseSql')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('synapsePrivateEndpointNameSql'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('synapsePrivateEndpointNameSql'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdSynapseSql')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('synapsePrivateEndpointNameSql'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('synapsePrivateEndpointNameSqlOnDemand')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('synapsePrivateEndpointNameSqlOnDemand')]",
                            "properties": {
                              "groupIds": [
                                "SqlOnDemand"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdSynapseSql')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('synapsePrivateEndpointNameSqlOnDemand'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('synapsePrivateEndpointNameSqlOnDemand'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdSynapseSql')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('synapsePrivateEndpointNameSqlOnDemand'))]"
                      ]
                    },
                    {
                      "type": "Microsoft.Network/privateEndpoints",
                      "apiVersion": "2020-11-01",
                      "name": "[variables('synapsePrivateEndpointNameDev')]",
                      "location": "[parameters('location')]",
                      "tags": "[parameters('tags')]",
                      "properties": {
                        "manualPrivateLinkServiceConnections": [],
                        "privateLinkServiceConnections": [
                          {
                            "name": "[variables('synapsePrivateEndpointNameDev')]",
                            "properties": {
                              "groupIds": [
                                "Dev"
                              ],
                              "privateLinkServiceId": "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]",
                              "requestMessage": ""
                            }
                          }
                        ],
                        "subnet": {
                          "id": "[parameters('subnetId')]"
                        }
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                      ]
                    },
                    {
                      "condition": "[not(empty(parameters('privateDnsZoneIdSynapseDev')))]",
                      "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                      "apiVersion": "2020-11-01",
                      "name": "[format('{0}/{1}', variables('synapsePrivateEndpointNameDev'), 'default')]",
                      "properties": {
                        "privateDnsZoneConfigs": [
                          {
                            "name": "[format('{0}-arecord', variables('synapsePrivateEndpointNameDev'))]",
                            "properties": {
                              "privateDnsZoneId": "[parameters('privateDnsZoneIdSynapseDev')]"
                            }
                          }
                        ]
                      },
                      "dependsOn": [
                        "[resourceId('Microsoft.Network/privateEndpoints', variables('synapsePrivateEndpointNameDev'))]"
                      ]
                    }
                  ],
                  "outputs": {
                    "synapseId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Synapse/workspaces', parameters('synapseName'))]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2020-10-01",
              "name": "synapse001StorageRoleAssignment",
              "subscriptionId": "[variables('synapseProduct001DefaultStorageAccountSubscriptionId')]",
              "resourceGroup": "[variables('synapseProduct001DefaultStorageAccountResourceGroupName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "storageAccountFileSystemId": {
                    "value": "[parameters('synapseProduct001DefaultStorageAccountFileSystemId')]"
                  },
                  "synapseId": {
                    "value": "[reference(resourceId('Microsoft.Resources/deployments', 'synapseProduct001')).outputs.synapseId.value]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.11.1.770",
                      "templateHash": "3135398669595721742"
                    }
                  },
                  "parameters": {
                    "storageAccountFileSystemId": {
                      "type": "string"
                    },
                    "synapseId": {
                      "type": "string"
                    }
                  },
                  "variables": {
                    "storageAccountFileSystemName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), last(split(parameters('storageAccountFileSystemId'), '/')), 'incorrectSegmentLength')]",
                    "storageAccountName": "[if(greaterOrEquals(length(split(parameters('storageAccountFileSystemId'), '/')), 13), split(parameters('storageAccountFileSystemId'), '/')[8], 'incorrectSegmentLength')]",
                    "synapseSubscriptionId": "[if(greaterOrEquals(length(split(parameters('synapseId'), '/')), 9), split(parameters('synapseId'), '/')[2], subscription().subscriptionId)]",
                    "synapseResourceGroupName": "[if(greaterOrEquals(length(split(parameters('synapseId'), '/')), 9), split(parameters('synapseId'), '/')[4], resourceGroup().name)]",
                    "synapseName": "[if(greaterOrEquals(length(split(parameters('synapseId'), '/')), 9), last(split(parameters('synapseId'), '/')), 'incorrectSegmentLength')]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Authorization/roleAssignments",
                      "apiVersion": "2020-04-01-preview",
                      "scope": "[format('Microsoft.Storage/storageAccounts/{0}/blobServices/{1}/containers/{2}', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2])]",
                      "name": "[guid(uniqueString(resourceId('Microsoft.Storage/storageAccounts/blobServices/containers', split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[0], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[1], split(format('{0}/default/{1}', variables('storageAccountName'), variables('storageAccountFileSystemName')), '/')[2]), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('synapseSubscriptionId'), variables('synapseResourceGroupName')), 'Microsoft.Synapse/workspaces', variables('synapseName'))))]",
                      "properties": {
                        "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('synapseSubscriptionId'), variables('synapseResourceGroupName')), 'Microsoft.Synapse/workspaces', variables('synapseName')), '2021-03-01', 'full').identity.principalId]",
                        "principalType": "ServicePrincipal"
                      }
                    }
                  ]
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', 'synapseProduct001')]"
              ]
            }
          ],
          "outputs": {
            "databricksProduct001Id": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'databricksProduct001')).outputs.databricksId.value]"
            },
            "databricksProduct001ApiUrl": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', 'databricksProduct001')).outputs.databricksApiUrl.value]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')]",
        "[subscriptionResourceId('Microsoft.Resources/resourceGroups', format('{0}-shared-product', variables('name')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-storage', variables('name'))), 'Microsoft.Resources/deployments', 'storageServices')]"
      ]
    },
    {
      "condition": "[not(empty(parameters('purviewId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "purviewSubscriptionRoleAssignmentReader",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "purviewId": {
            "value": "[parameters('purviewId')]"
          },
          "role": {
            "value": "Reader"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "16952791195789982998"
            }
          },
          "parameters": {
            "purviewId": {
              "type": "string"
            },
            "role": {
              "type": "string",
              "allowedValues": [
                "Reader",
                "StorageBlobDataReader"
              ]
            }
          },
          "variables": {
            "purviewSubscriptionId": "[if(greaterOrEquals(length(split(parameters('purviewId'), '/')), 9), split(parameters('purviewId'), '/')[2], subscription().subscriptionId)]",
            "purviewResourceGroupName": "[if(greaterOrEquals(length(split(parameters('purviewId'), '/')), 9), split(parameters('purviewId'), '/')[4], 'incorrectSegmentLength')]",
            "purviewName": "[if(greaterOrEquals(length(split(parameters('purviewId'), '/')), 9), last(split(parameters('purviewId'), '/')), 'incorrectSegmentLength')]",
            "roles": {
              "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
              "StorageBlobDataReader": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(uniqueString(subscription().subscriptionId, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('purviewSubscriptionId'), variables('purviewResourceGroupName')), 'Microsoft.Purview/accounts', variables('purviewName')), variables('roles')[parameters('role')]))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roles')[parameters('role')])]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('purviewSubscriptionId'), variables('purviewResourceGroupName')), 'Microsoft.Purview/accounts', variables('purviewName')), '2021-07-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      }
    },
    {
      "condition": "[not(empty(parameters('purviewId')))]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "purviewSubscriptionRoleAssignmentStorageBlobReader",
      "location": "[deployment().location]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "purviewId": {
            "value": "[parameters('purviewId')]"
          },
          "role": {
            "value": "StorageBlobDataReader"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.11.1.770",
              "templateHash": "16952791195789982998"
            }
          },
          "parameters": {
            "purviewId": {
              "type": "string"
            },
            "role": {
              "type": "string",
              "allowedValues": [
                "Reader",
                "StorageBlobDataReader"
              ]
            }
          },
          "variables": {
            "purviewSubscriptionId": "[if(greaterOrEquals(length(split(parameters('purviewId'), '/')), 9), split(parameters('purviewId'), '/')[2], subscription().subscriptionId)]",
            "purviewResourceGroupName": "[if(greaterOrEquals(length(split(parameters('purviewId'), '/')), 9), split(parameters('purviewId'), '/')[4], 'incorrectSegmentLength')]",
            "purviewName": "[if(greaterOrEquals(length(split(parameters('purviewId'), '/')), 9), last(split(parameters('purviewId'), '/')), 'incorrectSegmentLength')]",
            "roles": {
              "Reader": "acdd72a7-3385-48ef-bd42-f606fba81ae7",
              "StorageBlobDataReader": "2a2b9908-6ea1-4ae2-8e65-a410df84e7d1"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-04-01-preview",
              "name": "[guid(uniqueString(subscription().subscriptionId, extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('purviewSubscriptionId'), variables('purviewResourceGroupName')), 'Microsoft.Purview/accounts', variables('purviewName')), variables('roles')[parameters('role')]))]",
              "properties": {
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', variables('roles')[parameters('role')])]",
                "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('purviewSubscriptionId'), variables('purviewResourceGroupName')), 'Microsoft.Purview/accounts', variables('purviewName')), '2021-07-01', 'full').identity.principalId]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      }
    }
  ],
  "outputs": {
    "vnetId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.vnetId.value]"
    },
    "nsgId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.nsgId.value]"
    },
    "routeTableId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-network', variables('name'))), 'Microsoft.Resources/deployments', 'networkServices')).outputs.routeTableId.value]"
    },
    "mySqlServer001SubscriptionId": {
      "type": "string",
      "value": "[split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.mySqlServer001Id.value, '/')[2]]"
    },
    "mySqlServer001ResourceGroupName": {
      "type": "string",
      "value": "[split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.mySqlServer001Id.value, '/')[4]]"
    },
    "mySqlServer001Name": {
      "type": "string",
      "value": "[last(split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.mySqlServer001Id.value, '/'))]"
    },
    "mySqlServer001KeyVaultid": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.keyVault001Id.value]"
    },
    "mySqlServer001UsernameSecretName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.mySqlServer001UsernameSecretName.value]"
    },
    "mySqlServer001PasswordSecretName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.mySqlServer001PasswordSecretName.value]"
    },
    "mySqlServer001ConnectionStringSecretName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-metadata', variables('name'))), 'Microsoft.Resources/deployments', 'metadataServices')).outputs.mySqlServer001ConnectionStringSecretName.value]"
    },
    "logAnalyticsWorkspaceKeyVaultId": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-logging', variables('name'))), 'Microsoft.Resources/deployments', 'loggingServices')).outputs.logAnalytics001WorkspaceKeyVaultId.value]"
    },
    "logAnalyticsWorkspaceIdSecretName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-logging', variables('name'))), 'Microsoft.Resources/deployments', 'loggingServices')).outputs.logAnalytics001WorkspaceIdSecretName.value]"
    },
    "logAnalyticsWorkspaceKeySecretName": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-logging', variables('name'))), 'Microsoft.Resources/deployments', 'loggingServices')).outputs.logAnalytics001WorkspaceKeySecretName.value]"
    },
    "databricksIntegration001ApiUrl": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', 'sharedIntegrationServices')).outputs.databricksIntegration001ApiUrl.value]"
    },
    "databricksIntegration001Id": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', 'sharedIntegrationServices')).outputs.databricksIntegration001Id.value]"
    },
    "databricksIntegration001SubscriptionId": {
      "type": "string",
      "value": "[split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', 'sharedIntegrationServices')).outputs.databricksIntegration001Id.value, '/')[2]]"
    },
    "databricksIntegration001ResourceGroupName": {
      "type": "string",
      "value": "[split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', 'sharedIntegrationServices')).outputs.databricksIntegration001Id.value, '/')[4]]"
    },
    "databricksIntegration001Name": {
      "type": "string",
      "value": "[last(split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-integration', variables('name'))), 'Microsoft.Resources/deployments', 'sharedIntegrationServices')).outputs.databricksIntegration001Id.value, '/'))]"
    },
    "databricksProduct001ApiUrl": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-product', variables('name'))), 'Microsoft.Resources/deployments', 'sharedProductServices')).outputs.databricksProduct001ApiUrl.value]"
    },
    "databricksProduct001Id": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-product', variables('name'))), 'Microsoft.Resources/deployments', 'sharedProductServices')).outputs.databricksProduct001Id.value]"
    },
    "databricksProduct001SubscriptionId": {
      "type": "string",
      "value": "[split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-product', variables('name'))), 'Microsoft.Resources/deployments', 'sharedProductServices')).outputs.databricksProduct001Id.value, '/')[2]]"
    },
    "databricksProduct001ResourceGroupName": {
      "type": "string",
      "value": "[split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-product', variables('name'))), 'Microsoft.Resources/deployments', 'sharedProductServices')).outputs.databricksProduct001Id.value, '/')[4]]"
    },
    "databricksProduct001Name": {
      "type": "string",
      "value": "[last(split(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, format('{0}-shared-product', variables('name'))), 'Microsoft.Resources/deployments', 'sharedProductServices')).outputs.databricksProduct001Id.value, '/'))]"
    }
  }
}