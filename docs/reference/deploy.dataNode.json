{
    "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "enterpriseScaleAnalyticsCompanyPrefix": {
            "type": "string",
            "maxLength": 5,
            "metadata": {
                "description": "Provide the prefix (max 5 characters) for all services that will be created."
            }
        },
        "dataNodeName": {
            "type": "string",
            "defaultValue": "dn001",
            "maxLength": 5,
            "metadata": {
                "description": "Name of the data Landing Zone (max 5 characters)."
            }
        },
        "dnsServerAdresses": {
            "type": "array",
            "defaultValue": [
                "10.0.0.4"
            ],
            "metadata": {
                "description": "Specifies a list of internal IP adresses of your DNS forwarders or internal IP address of your Azure Firewall if you have enabled DNS forwarding."
            }
        },
        "firewallPrivateIp": {
            "type": "string",
            "defaultValue": "10.0.0.4",
            "metadata": {
                "description": "Specifies the private IP of your (Azure) Firewall."
            }
        },
        "privateDnsZoneResourceGroupId": {
            "type": "string",
            "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<your-rg-name>",
            "metadata": {
                "description": "Specifies the ID of the resource group of the private dns zones."
            }
        },
        "purviewId": {
            "type": "string",
            "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<your-rg-name>/providers/Microsoft.Purview/accounts/<your-purview-name>",
            "metadata": {
                "description": "Specifies the ID of the purview account."
            }
        },
        "hubVnetId": {
            "type": "string",
            "defaultValue": "/subscriptions/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/resourceGroups/<your-rg-name>/providers/Microsoft.Network/virtualNetworks/<your-vnet-name>",
            "metadata": {
                "description": "Specifies the ID of the resource group of the private dns zones."
            }
        },
        "administratorLoginPassword": {
            "type": "securestring",
            "metadata": {
                "description": "Specifies the Admin Password of the SQL Servers and VMs."
            }
        }
    },
    "functions": [],
    "variables": {
        "enterpriseScaleAnalyticsCompanyPrefix": "[toLower(parameters('enterpriseScaleAnalyticsCompanyPrefix'))]",
        "dataNodeName": "[toLower(parameters('dataNodeName'))]",
        "location": "[deployment().location]",
        "dnsServerAdresses": "[parameters('dnsServerAdresses')]",
        "firewallPrivateIp": "[parameters('firewallPrivateIp')]",
        "privateDnsZoneResourceGroupId": "[parameters('privateDnsZoneResourceGroupId')]",
        "purviewId": "[parameters('purviewId')]",
        "hubVnetId": "[parameters('hubVnetId')]",
        "administratorLoginPassword": "[parameters('administratorLoginPassword')]",
        "storageAccountNames": [
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'rawsa', uniqueString(subscription().subscriptionId, variables('storageResourceGroupName'))), 24)]",
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'encursa', uniqueString(subscription().subscriptionId, variables('storageResourceGroupName'))), 24)]",
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'worksa', uniqueString(subscription().subscriptionId, variables('storageResourceGroupName'))), 24)]"
        ],
        "secretStorageAccountNames": [
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'secrawsa', uniqueString(subscription().subscriptionId, variables('secretStorageResourceGroupName'))), 24)]",
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'secencursa', uniqueString(subscription().subscriptionId, variables('secretStorageResourceGroupName'))), 24)]",
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'secworksa', uniqueString(subscription().subscriptionId, variables('secretStorageResourceGroupName'))), 24)]"
        ],
        "externalStorageAccountNames": [
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'extsa001', uniqueString(subscription().subscriptionId, variables('externalStorageResourceGroupName'))), 24)]"
        ],
        "databricksNames": [
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-databricks001-ingest'), 30)]",
            "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-databricks002-processing'), 30)]"
        ],
        "vnetResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-network')]",
        "managementResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-mgmt')]",
        "integrationResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-integration')]",
        "storageResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-storage')]",
        "secretStorageResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-secretstorage')]",
        "externalStorageResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-externalstorage')]",
        "metadataResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-metadata')]",
        "processingDomainResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-processing-domain')]",
        "processingProductResourceGroupName": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-processing-product')]",
        "artifactStorageTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/ArtifactStorage/deploy.storage.json",
        "databricksTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/Databricks/deploy.databricks.json",
        "dataFactoryTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/DataFactory/deploy.dataFactory.json",
        "eventHubTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/EventHub/deploy.eventHub.json",
        "keyVaultTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/KeyVault/deploy.keyVault.json",
        "mySqlTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/MySql/deploy.mySql.json",
        "shirTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/docs/reference/deploy.shir.json",
        "sqlDatabaseTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/SqlDatabase/deploy.sqlDatabase.json",
        "sqlServerTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/SqlServer/deploy.sqlServer.json",
        "storageTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/Storage/deploy.storage.json",
        "synapseTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/Synapse/deploy.synapse.json",
        "vnetTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/VirtualNetwork/deploy.vnet.json",
        "vnetPeeringTemplateLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/VirtualNetworkPeering/deploy.vnetPeering.json",
        "shirScriptLink": "https://raw.githubusercontent.com/Azure/data-landing-zone/main/infra/SelfHostedIntegrationRuntime/installSHIRGateway.ps1"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('vnetResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('managementResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('integrationResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('storageResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('secretStorageResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('externalStorageResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('metadataResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('processingDomainResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/resourceGroups",
            "apiVersion": "2020-06-01",
            "name": "[variables('processingProductResourceGroupName')]",
            "location": "[variables('location')]",
            "properties": {}
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "vnetDeployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('vnetResourceGroupName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vnetTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vnetName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-vnet'), 64)]"
                    },
                    "dataNodeName": {
                        "value": "[concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'))]"
                    },
                    "deployDatabricksNsg": {
                        "value": true
                    },
                    "dnsServerAdresses": {
                        "value": "[variables('dnsServerAdresses')]"
                    },
                    "firewallPrivateIp": {
                        "value": "[variables('firewallPrivateIp')]"
                    }
                }
            },
            "resourceGroup": "[variables('vnetResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "vnetPeering001Deployment",
            "dependsOn": [
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vnetPeeringTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "sourceVnetId": {
                        "value": "[reference('vnetDeployment').outputs.vnetId.value]"
                    },
                    "destinationVnetId": {
                        "value": "[variables('hubVnetId')]"
                    }
                }
            },
            "resourceGroup": "[variables('vnetResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "vnetPeering002Deployment",
            "dependsOn": [
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('vnetPeeringTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "sourceVnetId": {
                        "value": "[variables('hubVnetId')]"
                    },
                    "destinationVnetId": {
                        "value": "[reference('vnetDeployment').outputs.vnetId.value]"
                    }
                }
            },
            "resourceGroup": "[variables('vnetResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "keyVault001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('metadataResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('keyVaultTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "keyVaultName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-keyvault001', uniqueString(subscription().subscriptionId, variables('metadataResourceGroupName'))), 24)]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneId": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('metadataResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "keyVault002Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('metadataResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('keyVaultTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "keyVaultName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-keyvault002', uniqueString(subscription().subscriptionId, variables('metadataResourceGroupName'))), 24)]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneId": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.vaultcore.azure.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('metadataResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[take(concat('storageDeployment-', copyIndex(), '-', variables('storageAccountNames')[copyIndex()]), 64)]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('storageResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('storageTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('storageAccountNames')[copyIndex()]]"
                    },
                    "storageAccountContainerNames": {
                        "value": [
                            "data"
                        ]
                    },
                    "storageAccountType": {
                        "value": "Standard_ZRS"
                    },
                    "enableHns": {
                        "value": true
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdBlob": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net')]"
                    },
                    "privateDnsZoneIdDfs": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('storageResourceGroupName')]",
            "copy": {
                "name": "storageAccountCopy",
                "count": "[length(variables('storageAccountNames'))]",
                "mode": "Parallel"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[take(concat('secretStorageDeployment-', copyIndex(), '-', variables('secretStorageAccountNames')[copyIndex()]), 64)]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('secretStorageResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('storageTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('secretStorageAccountNames')[copyIndex()]]"
                    },
                    "storageAccountContainerNames": {
                        "value": [
                            "data"
                        ]
                    },
                    "storageAccountType": {
                        "value": "Standard_ZRS"
                    },
                    "enableHns": {
                        "value": true
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdBlob": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net')]"
                    },
                    "privateDnsZoneIdDfs": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('secretStorageResourceGroupName')]",
            "copy": {
                "name": "secretStorageAccountCopy",
                "count": "[length(variables('secretStorageAccountNames'))]",
                "mode": "Parallel"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[take(concat('externalStorageDeployment-', copyIndex(), '-', variables('externalStorageAccountNames')[copyIndex()]), 64)]",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('externalStorageResourceGroupName'))]",
                "vnetDeployment",
                "keyVault001Deployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('storageTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "storageAccountName": {
                        "value": "[variables('externalStorageAccountNames')[copyIndex()]]"
                    },
                    "storageAccountContainerNames": {
                        "value": [
                            "data"
                        ]
                    },
                    "storageAccountType": {
                        "value": "Standard_LRS"
                    },
                    "enableHns": {
                        "value": false
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdBlob": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net')]"
                    },
                    "privateDnsZoneIdDfs": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.dfs.core.windows.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('externalStorageResourceGroupName')]",
            "copy": {
                "name": "externalStorageAccountCopy",
                "count": "[length(variables('externalStorageAccountNames'))]",
                "mode": "Parallel"
            }
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "sqlserver001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('metadataResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sqlServerTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "sqlServerName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-sqlserver001', uniqueString(subscription().subscriptionId, variables('metadataResourceGroupName'))), 63)]"
                    },
                    "administratorLogin": {
                        "value": "SqlServerMainUser"
                    },
                    "administratorLoginPassword": {
                        "value": "[variables('administratorLoginPassword')]"
                    },
                    "sqlAdminGroupName": {
                        "value": ""
                    },
                    "sqlAdminGroupObjectID": {
                        "value": ""
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneId": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('metadataResourceGroupName')]"
        },
        // {
        //     "type": "Microsoft.Resources/deployments",
        //     "apiVersion": "2020-06-01",
        //     "name": "sqlserver002Deployment",
        //     "dependsOn": [
        //         "[resourceId('Microsoft.Resources/resourceGroups', variables('metadataResourceGroupName'))]",
        //         "vnetDeployment"
        //     ],
        //     "properties": {
        //         "mode": "Incremental",
        //         "templateLink": {
        //             "uri": "[variables('sqlServerTemplateLink')]",
        //             "contentVersion": "1.0.0.0"
        //         },
        //         "parameters": {
        //             "location": {
        //                 "value": "[variables('location')]"
        //             },
        //             "sqlServerName": {
        //                 "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-sqlserver002', uniqueString(subscription().subscriptionId, variables('metadataResourceGroupName'))), 63)]"
        //             },
        //             "administratorLogin": {
        //                 "value": "SqlServerMainUser"
        //             },
        //             "administratorLoginPassword": {
        //                 "value": "[variables('administratorLoginPassword')]"
        //             },
        //             "sqlAdminGroupName": {
        //                 "value": ""
        //             },
        //             "sqlAdminGroupObjectID": {
        //                 "value": ""
        //             },
        //             "subnetId": {
        //                 "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
        //             },
        //             "privateDnsZoneId": {
        //                 "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.database.windows.net')]"
        //             }
        //         }
        //     },
        //     "resourceGroup": "[variables('metadataResourceGroupName')]"
        // },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "sqlDatabase001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('metadataResourceGroupName'))]",
                "keyVault001Deployment",
                "sqlserver001Deployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('sqlDatabaseTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "sqlServerId": {
                        "value": "[reference('sqlserver001Deployment').outputs.sqlServerId.value]"
                    },
                    "sqlServerAdministratorLoginPassword": {
                        "value": "[variables('administratorLoginPassword')]"
                    },
                    "sqlDatabaseName": {
                        "value": "AdfMetastoreDB"
                    },
                    "sqlDatabaseSkuName": {
                        "value": "Basic"
                    },
                    "sqlDatabaseTier": {
                        "value": "Basic"
                    },
                    "sqlDatabaseCapacity": {
                        "value": 5
                    },
                    "sqlDatabaseMaxSizeInBytes": {
                        "value": 524288000
                    },
                    "sqlDatabaseZoneRedundant": {
                        "value": false
                    },
                    "sqlDatabaseLicenseType": {
                        "value": "LicenseIncluded"
                    },
                    "sqlDatabaseReadReplicaCount": {
                        "value": 0
                    },
                    "sqlDatabaseMinCapacity": {
                        "value": "0.5"
                    },
                    "sqlDatabaseStorageAccountType": {
                        "value": "GRS"
                    },
                    "sqlDatabaseAutoPauseDelay": {
                        "value": -1
                    },
                    "keyVaultId": {
                        "value": "[reference('keyVault001Deployment').outputs.keyVaultId.value]"
                    }
                }
            },
            "resourceGroup": "[variables('metadataResourceGroupName')]"
        },
        // {
        //     "type": "Microsoft.Resources/deployments",
        //     "apiVersion": "2020-06-01",
        //     "name": "sqlDatabase002Deployment",
        //     "dependsOn": [
        //         "[resourceId('Microsoft.Resources/resourceGroups', variables('metadataResourceGroupName'))]",
        //         "keyVault002Deployment",
        //         "sqlserver002Deployment"
        //     ],
        //     "properties": {
        //         "mode": "Incremental",
        //         "templateLink": {
        //             "uri": "[variables('sqlDatabaseTemplateLink')]",
        //             "contentVersion": "1.0.0.0"
        //         },
        //         "parameters": {
        //             "location": {
        //                 "value": "[variables('location')]"
        //             },
        //             "sqlServerId": {
        //                 "value": "[reference('sqlserver002Deployment').outputs.sqlServerId.value]"
        //             },
        //             "sqlServerAdministratorLoginPassword": {
        //                 "value": "[variables('administratorLoginPassword')]"
        //             },
        //             "sqlDatabaseName": {
        //                 "value": "HiveMetastoreDB"
        //             },
        //             "sqlDatabaseSku": {
        //                 "value": "Basic"
        //             },
        //             "sqlDatabaseTier": {
        //                 "value": "Basic"
        //             },
        //             "sqlDatabaseCapacity": {
        //                 "value": 5
        //             },
        //             "sqlDatabaseMaxSizeInBytes": {
        //                 "value": 524288000
        //             },
        //             "sqlDatabaseZoneRedundant": {
        //                 "value": false
        //             },
        //             "sqlDatabaseLicenseType": {
        //                 "value": "LicenseIncluded"
        //             },
        //             "sqlDatabaseReadReplicaCount": {
        //                 "value": 0
        //             },
        //             "sqlDatabaseMinCapacity": {
        //                 "value": "0.5"
        //             },
        //             "sqlDatabaseStorageAccountType": {
        //                 "value": "GRS"
        //             },
        //             "sqlDatabaseAutoPauseDelay": {
        //                 "value": -1
        //             },
        //             "keyVaultId": {
        //                 "value": "[reference('keyVault002Deployment').outputs.keyVaultId.value]"
        //             }
        //         }
        //     },
        //     "resourceGroup": "[variables('metadataResourceGroupName')]"
        // },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "mySql001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('metadataResourceGroupName'))]",
                "keyVault002Deployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('mySqlTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "mySqlServerName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-mysqlserver001', uniqueString(subscription().subscriptionId, variables('metadataResourceGroupName'))), 63)]"
                    },
                    "mySqlDatabaseName": {
                        "value": "HiveMetastoreDB"
                    },
                    "mySqlSkuName": {
                        "value": "GP_Gen5_2"
                    },
                    "mySqlSkuTier": {
                        "value": "GeneralPurpose"
                    },
                    "mySqlSkuCapacity": {
                        "value": 2
                    },
                    "mySqlSkuSize": {
                        "value": 5120
                    },
                    "mySqlSkuFamily": {
                        "value": "Gen5"
                    },
                    "mySqlServerAdministratorLogin": {
                        "value": "ServerMainUser"
                    },
                    "mySqlServerAdministratorLoginPassword": {
                        "value": "[variables('administratorLoginPassword')]"
                    },
                    "mySqlAdminGroupName": {
                        "value": ""
                    },
                    "mySqlAdminGroupObjectID": {
                        "value": ""
                    },
                    "keyVaultId": {
                        "value": "[reference('keyVault002Deployment').outputs.keyVaultId.value]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneId": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.mysql.database.azure.com')]"
                    }
                }
            },
            "resourceGroup": "[variables('metadataResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "databricks001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('processingDomainResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('databricksTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "databricksName": {
                        "value": "[variables('databricksNames')[0]]"
                    },
                    "databricksVnetId": {
                        "value": "[reference('vnetDeployment').outputs.vnetId.value]"
                    },
                    "databricksManagedResourceGroupId": {
                        "value": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('databricksNames')[0])]"
                    },
                    "databricksPrivateSubnetName": {
                        "value": "[reference('vnetDeployment').outputs.databricksPrivateSubnetName001.value]"
                    },
                    "databricksPublicSubnetName": {
                        "value": "[reference('vnetDeployment').outputs.databricksPublicSubnetName001.value]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdDatabricks": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.azuredatabricks.net')]"
                    },
                    "privateDnsZoneIdBlob": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('processingDomainResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "databricks002Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('processingProductResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('databricksTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "databricksName": {
                        "value": "[variables('databricksNames')[1]]"
                    },
                    "databricksVnetId": {
                        "value": "[reference('vnetDeployment').outputs.vnetId.value]"
                    },
                    "databricksManagedResourceGroupId": {
                        "value": "[concat('/subscriptions/', subscription().subscriptionId, '/resourceGroups/', variables('databricksNames')[1])]"
                    },
                    "databricksPrivateSubnetName": {
                        "value": "[reference('vnetDeployment').outputs.databricksPrivateSubnetName002.value]"
                    },
                    "databricksPublicSubnetName": {
                        "value": "[reference('vnetDeployment').outputs.databricksPublicSubnetName002.value]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdDatabricks": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.azuredatabricks.net')]"
                    },
                    "privateDnsZoneIdBlob": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.blob.core.windows.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('processingProductResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "eventHub001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('processingDomainResourceGroupName'))]",
                "vnetDeployment",
                "keyVault001Deployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('eventHubTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "eventHubName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-eventhub001', uniqueString(subscription().subscriptionId, variables('processingDomainResourceGroupName'))), 50)]"
                    },
                    "eventHubSku": {
                        "value": "Standard"
                    },
                    "eventHubMinThroughputUnits": {
                        "value": 1
                    },
                    "eventHubMaxThroughputUnits": {
                        "value": 2
                    },
                    "keyVaultId": {
                        "value": "[reference('keyVault001Deployment').outputs.keyVaultId.value]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneId": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.servicebus.windows.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('processingDomainResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "dataFactory001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('processingDomainResourceGroupName'))]",
                "vnetDeployment",
                "keyVault001Deployment",
                "sqlserver001Deployment",
                "sqlDatabase001Deployment",
                "databricks001Deployment",
                "storageAccountCopy"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('dataFactoryTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "dataFactoryName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-datafactory001', uniqueString(subscription().subscriptionId, variables('processingDomainResourceGroupName'))), 63)]"
                    },
                    "dataFactoryGitAccount": {
                        "value": ""
                    },
                    "dataFactoryGitRepo": {
                        "value": ""
                    },
                    "dataFactoryGitCollaborationBranch": {
                        "value": ""
                    },
                    "dataFactoryGitRootFolder": {
                        "value": ""
                    },
                    "dataFactoryGitType": {
                        "value": "FactoryGitHubConfiguration"
                    },
                    "purviewId": {
                        "value": "[variables('purviewId')]"
                    },
                    "keyVaultId": {
                        "value": "[reference('keyVault001Deployment').outputs.keyVaultId.value]"
                    },
                    "sqlServerId": {
                        "value": "[reference('sqlserver001Deployment').outputs.sqlServerId.value]"
                    },
                    "sqlDatabaseId": {
                        "value": "[reference('sqlDatabase001Deployment').outputs.sqlDatabaseId.value]"
                    },
                    "databricksWorkspaceId": {
                        "value": "[reference('databricks001Deployment').outputs.databricksWorkspaceId.value]"
                    },
                    "rawStorageAccountId": {
                        "value": "[reference(take(concat('storageDeployment-0-', variables('storageAccountNames')[0]), 64)).outputs.storageAccountId.value]"
                    },
                    "rawStorageAccountFileSystemName": {
                        "value": "data"
                    },
                    "encurStorageAccountId": {
                        "value": "[reference(take(concat('storageDeployment-1-', variables('storageAccountNames')[1]), 64)).outputs.storageAccountId.value]"
                    },
                    "encurStorageAccountFileSystemName": {
                        "value": "data"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdDataFactory": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.datafactory.azure.net')]"
                    },
                    "privateDnsZoneIdPortal": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.adf.azure.com')]"
                    }
                }
            },
            "resourceGroup": "[variables('processingDomainResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "dataFactory002Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('integrationResourceGroupName'))]",
                "vnetDeployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('dataFactoryTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "dataFactoryName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-datafactory002', uniqueString(subscription().subscriptionId, variables('integrationResourceGroupName'))), 63)]"
                    },
                    "dataFactoryGitAccount": {
                        "value": ""
                    },
                    "dataFactoryGitRepo": {
                        "value": ""
                    },
                    "dataFactoryGitCollaborationBranch": {
                        "value": ""
                    },
                    "dataFactoryGitRootFolder": {
                        "value": ""
                    },
                    "dataFactoryGitType": {
                        "value": "FactoryGitHubConfiguration"
                    },
                    "purviewId": {
                        "value": "[variables('purviewId')]"
                    },
                    "keyVaultId": {
                        "value": ""
                    },
                    "sqlServerId": {
                        "value": ""
                    },
                    "sqlDatabaseId": {
                        "value": ""
                    },
                    "databricksWorkspaceId": {
                        "value": ""
                    },
                    "rawStorageAccountId": {
                        "value": ""
                    },
                    "rawStorageAccountFileSystemName": {
                        "value": ""
                    },
                    "encurStorageAccountId": {
                        "value": ""
                    },
                    "encurStorageAccountFileSystemName": {
                        "value": ""
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdDataFactory": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.datafactory.azure.net')]"
                    },
                    "privateDnsZoneIdPortal": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.adf.azure.com')]"
                    }
                }
            },
            "resourceGroup": "[variables('integrationResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "artifactStorageAccount001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('integrationResourceGroupName'))]"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('artifactStorageTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "storageAccountName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'artifactstorage001', uniqueString(subscription().subscriptionId, variables('integrationResourceGroupName'))), 24)]"
                    },
                    "storageAccountType": {
                        "value": "Standard_LRS"
                    }
                }
            },
            "resourceGroup": "[variables('integrationResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "shir001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('integrationResourceGroupName'))]",
                "dataFactory002Deployment",
                "vnetDeployment",
                "vnetPeering001Deployment",
                "vnetPeering002Deployment"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('shirTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "vmssName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), variables('dataNodeName'), 'dhSHIR001'), 64)]"
                    },
                    "vmssSkuTier": {
                        "value": "Standard"
                    },
                    "vmssSkuName": {
                        "value": "Standard_DS2_v2"
                    },
                    "vmssAdminUsername": {
                        "value": "VmssMainUser"
                    },
                    "vmssAdminPassword": {
                        "value": "[variables('administratorLoginPassword')]"
                    },
                    "dataFactoryId": {
                        "value": "[reference('dataFactory002Deployment').outputs.dataFactoryId.value]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.subnetId.value]"
                    },
                    "fileUri": {
                        "value": "[variables('shirScriptLink')]"
                    }
                }
            },
            "resourceGroup": "[variables('integrationResourceGroupName')]"
        },
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "synapse001Deployment",
            "dependsOn": [
                "[resourceId('Microsoft.Resources/resourceGroups', variables('processingProductResourceGroupName'))]",
                "vnetDeployment",
                "storageAccountCopy"
            ],
            "properties": {
                "mode": "Incremental",
                "templateLink": {
                    "uri": "[variables('synapseTemplateLink')]",
                    "contentVersion": "1.0.0.0"
                },
                "parameters": {
                    "location": {
                        "value": "[variables('location')]"
                    },
                    "synapseWorkspaceName": {
                        "value": "[take(concat(variables('enterpriseScaleAnalyticsCompanyPrefix'), '-', variables('dataNodeName'), '-synapse001', uniqueString(subscription().subscriptionId, variables('processingProductResourceGroupName'))), 50)]"
                    },
                    "synapseDefaultStorageAccountId": {
                        "value": "[reference(take(concat('storageDeployment-2-', variables('storageAccountNames')[2]), 64)).outputs.storageAccountId.value]"
                    },
                    "synapseDefaultStorageAccountFileSystem": {
                        "value": "data"
                    },
                    "synapseSqlAdministratorLogin": {
                        "value": "SqlServerMainUser"
                    },
                    "synapseSqlAdministratorPassword": {
                        "value": "[variables('administratorLoginPassword')]"
                    },
                    "synapseDatalakeAnalyticsResourceId": {
                        "value": ""
                    },
                    "synapseComputeSubnetResourceId": {
                        "value": ""
                    },
                    "synapseSqlAdminGroupName": {
                        "value": ""
                    },
                    "synapseSqlAdminGroupObjectID": {
                        "value": ""
                    },
                    "purviewId": {
                        "value": "[variables('purviewId')]"
                    },
                    "subnetId": {
                        "value": "[reference('vnetDeployment').outputs.privateLinkSubnetId.value]"
                    },
                    "privateDnsZoneIdSql": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.sql.azuresynapse.net')]"
                    },
                    "privateDnsZoneIdDev": {
                        "value": "[concat(variables('privateDnsZoneResourceGroupId'), '/providers/Microsoft.Network/privateDnsZones/privatelink.dev.azuresynapse.net')]"
                    }
                }
            },
            "resourceGroup": "[variables('processingProductResourceGroupName')]"
        }
    ],
    "outputs": {}
}